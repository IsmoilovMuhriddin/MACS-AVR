
sam.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000292  00800100  00001a50  00001ae4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a50  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000041f  00800392  00800392  00001d76  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001d76  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001da8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002d0  00000000  00000000  00001de8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000041ea  00000000  00000000  000020b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f52  00000000  00000000  000062a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001e22  00000000  00000000  000071f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c48  00000000  00000000  00009018  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000987  00000000  00000000  00009c60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003c4e  00000000  00000000  0000a5e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002b8  00000000  00000000  0000e235  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	62 c0       	rjmp	.+196    	; 0xca <__vector_1>
       6:	00 00       	nop
       8:	dd c0       	rjmp	.+442    	; 0x1c4 <__vector_2>
       a:	00 00       	nop
       c:	5a c1       	rjmp	.+692    	; 0x2c2 <__vector_3>
       e:	00 00       	nop
      10:	1d c2       	rjmp	.+1082   	; 0x44c <__vector_4>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	d6 c4       	rjmp	.+2476   	; 0xa26 <__vector_30>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	13 e0       	ldi	r17, 0x03	; 3
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e0 e5       	ldi	r30, 0x50	; 80
      a0:	fa e1       	ldi	r31, 0x1A	; 26
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a2 39       	cpi	r26, 0x92	; 146
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	27 e0       	ldi	r18, 0x07	; 7
      b4:	a2 e9       	ldi	r26, 0x92	; 146
      b6:	b3 e0       	ldi	r27, 0x03	; 3
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a1 3b       	cpi	r26, 0xB1	; 177
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	e7 d3       	rcall	.+1998   	; 0x892 <main>
      c4:	0c 94 26 0d 	jmp	0x1a4c	; 0x1a4c <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <__vector_1>:
	
	CoolOpenClose(Cool_stat,action_cool);
}


ISR(INT0_vect){
      ca:	1f 92       	push	r1
      cc:	0f 92       	push	r0
      ce:	0f b6       	in	r0, 0x3f	; 63
      d0:	0f 92       	push	r0
      d2:	11 24       	eor	r1, r1
      d4:	0b b6       	in	r0, 0x3b	; 59
      d6:	0f 92       	push	r0
      d8:	2f 93       	push	r18
      da:	3f 93       	push	r19
      dc:	4f 93       	push	r20
      de:	5f 93       	push	r21
      e0:	6f 93       	push	r22
      e2:	7f 93       	push	r23
      e4:	8f 93       	push	r24
      e6:	9f 93       	push	r25
      e8:	af 93       	push	r26
      ea:	bf 93       	push	r27
      ec:	ef 93       	push	r30
      ee:	ff 93       	push	r31
if(count==0&&menu_mode==0){
      f0:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <count>
      f4:	90 91 95 03 	lds	r25, 0x0395	; 0x800395 <count+0x1>
      f8:	00 97       	sbiw	r24, 0x00	; 0
      fa:	b9 f4       	brne	.+46     	; 0x12a <__vector_1+0x60>
      fc:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <__data_end>
     100:	90 91 93 03 	lds	r25, 0x0393	; 0x800393 <__data_end+0x1>
     104:	89 2b       	or	r24, r25
     106:	09 f0       	breq	.+2      	; 0x10a <__vector_1+0x40>
     108:	4a c0       	rjmp	.+148    	; 0x19e <__vector_1+0xd4>
    
   arrow_clr();
     10a:	d5 d6       	rcall	.+3498   	; 0xeb6 <arrow_clr>
   if(getDirX()==20){
     10c:	c3 d4       	rcall	.+2438   	; 0xa94 <getDirX>
     10e:	44 97       	sbiw	r24, 0x14	; 20
     110:	31 f4       	brne	.+12     	; 0x11e <__vector_1+0x54>
      setDirX(28);
     112:	8c e1       	ldi	r24, 0x1C	; 28
     114:	90 e0       	ldi	r25, 0x00	; 0
     116:	b9 d4       	rcall	.+2418   	; 0xa8a <setDirX>
      arrow(getDirX());
     118:	bd d4       	rcall	.+2426   	; 0xa94 <getDirX>
     11a:	53 d6       	rcall	.+3238   	; 0xdc2 <arrow>
     11c:	40 c0       	rjmp	.+128    	; 0x19e <__vector_1+0xd4>
   }
   else {
       setDirX(20);
     11e:	84 e1       	ldi	r24, 0x14	; 20
     120:	90 e0       	ldi	r25, 0x00	; 0
     122:	b3 d4       	rcall	.+2406   	; 0xa8a <setDirX>
	   arrow(getDirX());
     124:	b7 d4       	rcall	.+2414   	; 0xa94 <getDirX>
     126:	4d d6       	rcall	.+3226   	; 0xdc2 <arrow>
     128:	3a c0       	rjmp	.+116    	; 0x19e <__vector_1+0xd4>
	   }
}

else if (count==1&&menu_mode==0){
     12a:	01 97       	sbiw	r24, 0x01	; 1
     12c:	09 f0       	breq	.+2      	; 0x130 <__vector_1+0x66>
     12e:	37 c0       	rjmp	.+110    	; 0x19e <__vector_1+0xd4>
     130:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <__data_end>
     134:	90 91 93 03 	lds	r25, 0x0393	; 0x800393 <__data_end+0x1>
     138:	00 97       	sbiw	r24, 0x00	; 0
     13a:	d1 f4       	brne	.+52     	; 0x170 <__vector_1+0xa6>
   arrow_clr(getDirX());
     13c:	ab d4       	rcall	.+2390   	; 0xa94 <getDirX>
     13e:	bb d6       	rcall	.+3446   	; 0xeb6 <arrow_clr>
   if(getDirX()==20){
     140:	a9 d4       	rcall	.+2386   	; 0xa94 <getDirX>
     142:	44 97       	sbiw	r24, 0x14	; 20
     144:	31 f4       	brne	.+12     	; 0x152 <__vector_1+0x88>
	   setDirX(28);
     146:	8c e1       	ldi	r24, 0x1C	; 28
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	9f d4       	rcall	.+2366   	; 0xa8a <setDirX>
	   arrow(getDirX());
     14c:	a3 d4       	rcall	.+2374   	; 0xa94 <getDirX>
     14e:	39 d6       	rcall	.+3186   	; 0xdc2 <arrow>
     150:	26 c0       	rjmp	.+76     	; 0x19e <__vector_1+0xd4>
   }
   else if(getDirX()==28){
     152:	a0 d4       	rcall	.+2368   	; 0xa94 <getDirX>
     154:	4c 97       	sbiw	r24, 0x1c	; 28
     156:	31 f4       	brne	.+12     	; 0x164 <__vector_1+0x9a>
	   setDirX(36);
     158:	84 e2       	ldi	r24, 0x24	; 36
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	96 d4       	rcall	.+2348   	; 0xa8a <setDirX>
	   arrow(getDirX());
     15e:	9a d4       	rcall	.+2356   	; 0xa94 <getDirX>
     160:	30 d6       	rcall	.+3168   	; 0xdc2 <arrow>
     162:	1d c0       	rjmp	.+58     	; 0x19e <__vector_1+0xd4>
    }	
    else {
	    setDirX(20);
     164:	84 e1       	ldi	r24, 0x14	; 20
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	90 d4       	rcall	.+2336   	; 0xa8a <setDirX>
	    arrow(getDirX());
     16a:	94 d4       	rcall	.+2344   	; 0xa94 <getDirX>
     16c:	2a d6       	rcall	.+3156   	; 0xdc2 <arrow>
     16e:	17 c0       	rjmp	.+46     	; 0x19e <__vector_1+0xd4>
    }  
   }
else if (count==1&&menu_mode==1){
     170:	01 97       	sbiw	r24, 0x01	; 1
     172:	a9 f4       	brne	.+42     	; 0x19e <__vector_1+0xd4>
	if (minTemp>16)
     174:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     178:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     17c:	81 31       	cpi	r24, 0x11	; 17
     17e:	91 05       	cpc	r25, r1
     180:	3c f0       	brlt	.+14     	; 0x190 <__vector_1+0xc6>
	{
		minTemp--;
     182:	01 97       	sbiw	r24, 0x01	; 1
     184:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     188:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		menu_disp1_edit(minTemp);
     18c:	88 d4       	rcall	.+2320   	; 0xa9e <menu_disp1_edit>
     18e:	07 c0       	rjmp	.+14     	; 0x19e <__vector_1+0xd4>
	}
	else{ minTemp =32;
     190:	80 e2       	ldi	r24, 0x20	; 32
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     198:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	menu_disp1_edit(minTemp);
     19c:	80 d4       	rcall	.+2304   	; 0xa9e <menu_disp1_edit>
	}
 }
}
     19e:	ff 91       	pop	r31
     1a0:	ef 91       	pop	r30
     1a2:	bf 91       	pop	r27
     1a4:	af 91       	pop	r26
     1a6:	9f 91       	pop	r25
     1a8:	8f 91       	pop	r24
     1aa:	7f 91       	pop	r23
     1ac:	6f 91       	pop	r22
     1ae:	5f 91       	pop	r21
     1b0:	4f 91       	pop	r20
     1b2:	3f 91       	pop	r19
     1b4:	2f 91       	pop	r18
     1b6:	0f 90       	pop	r0
     1b8:	0b be       	out	0x3b, r0	; 59
     1ba:	0f 90       	pop	r0
     1bc:	0f be       	out	0x3f, r0	; 63
     1be:	0f 90       	pop	r0
     1c0:	1f 90       	pop	r1
     1c2:	18 95       	reti

000001c4 <__vector_2>:

ISR(INT1_vect){
     1c4:	1f 92       	push	r1
     1c6:	0f 92       	push	r0
     1c8:	0f b6       	in	r0, 0x3f	; 63
     1ca:	0f 92       	push	r0
     1cc:	11 24       	eor	r1, r1
     1ce:	0b b6       	in	r0, 0x3b	; 59
     1d0:	0f 92       	push	r0
     1d2:	2f 93       	push	r18
     1d4:	3f 93       	push	r19
     1d6:	4f 93       	push	r20
     1d8:	5f 93       	push	r21
     1da:	6f 93       	push	r22
     1dc:	7f 93       	push	r23
     1de:	8f 93       	push	r24
     1e0:	9f 93       	push	r25
     1e2:	af 93       	push	r26
     1e4:	bf 93       	push	r27
     1e6:	ef 93       	push	r30
     1e8:	ff 93       	push	r31
if(count==0&&menu_mode==0){
     1ea:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <count>
     1ee:	90 91 95 03 	lds	r25, 0x0395	; 0x800395 <count+0x1>
     1f2:	00 97       	sbiw	r24, 0x00	; 0
     1f4:	c9 f4       	brne	.+50     	; 0x228 <__vector_2+0x64>
     1f6:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <__data_end>
     1fa:	90 91 93 03 	lds	r25, 0x0393	; 0x800393 <__data_end+0x1>
     1fe:	89 2b       	or	r24, r25
     200:	09 f0       	breq	.+2      	; 0x204 <__vector_2+0x40>
     202:	4c c0       	rjmp	.+152    	; 0x29c <__vector_2+0xd8>
		menu_disp();
     204:	07 d6       	rcall	.+3086   	; 0xe14 <menu_disp>
		arrow_clr(getDirX());
     206:	46 d4       	rcall	.+2188   	; 0xa94 <getDirX>
     208:	56 d6       	rcall	.+3244   	; 0xeb6 <arrow_clr>
		if(getDirX()==20){
     20a:	44 d4       	rcall	.+2184   	; 0xa94 <getDirX>
     20c:	44 97       	sbiw	r24, 0x14	; 20
     20e:	31 f4       	brne	.+12     	; 0x21c <__vector_2+0x58>
			setDirX(28);
     210:	8c e1       	ldi	r24, 0x1C	; 28
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	3a d4       	rcall	.+2164   	; 0xa8a <setDirX>
			arrow(getDirX());
     216:	3e d4       	rcall	.+2172   	; 0xa94 <getDirX>
     218:	d4 d5       	rcall	.+2984   	; 0xdc2 <arrow>
     21a:	40 c0       	rjmp	.+128    	; 0x29c <__vector_2+0xd8>
		}
		else {
			setDirX(20);
     21c:	84 e1       	ldi	r24, 0x14	; 20
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	34 d4       	rcall	.+2152   	; 0xa8a <setDirX>
			arrow(getDirX());
     222:	38 d4       	rcall	.+2160   	; 0xa94 <getDirX>
     224:	ce d5       	rcall	.+2972   	; 0xdc2 <arrow>
     226:	3a c0       	rjmp	.+116    	; 0x29c <__vector_2+0xd8>
		}
	}

	
else if (count==1&&menu_mode==0){
     228:	01 97       	sbiw	r24, 0x01	; 1
     22a:	09 f0       	breq	.+2      	; 0x22e <__vector_2+0x6a>
     22c:	37 c0       	rjmp	.+110    	; 0x29c <__vector_2+0xd8>
     22e:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <__data_end>
     232:	90 91 93 03 	lds	r25, 0x0393	; 0x800393 <__data_end+0x1>
     236:	00 97       	sbiw	r24, 0x00	; 0
     238:	d1 f4       	brne	.+52     	; 0x26e <__vector_2+0xaa>
		arrow_clr(getDirX());
     23a:	2c d4       	rcall	.+2136   	; 0xa94 <getDirX>
     23c:	3c d6       	rcall	.+3192   	; 0xeb6 <arrow_clr>
		if(getDirX()==20){
     23e:	2a d4       	rcall	.+2132   	; 0xa94 <getDirX>
     240:	44 97       	sbiw	r24, 0x14	; 20
     242:	31 f4       	brne	.+12     	; 0x250 <__vector_2+0x8c>
			setDirX(36);
     244:	84 e2       	ldi	r24, 0x24	; 36
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	20 d4       	rcall	.+2112   	; 0xa8a <setDirX>
			arrow(getDirX());
     24a:	24 d4       	rcall	.+2120   	; 0xa94 <getDirX>
     24c:	ba d5       	rcall	.+2932   	; 0xdc2 <arrow>
     24e:	26 c0       	rjmp	.+76     	; 0x29c <__vector_2+0xd8>
		}
		else if(getDirX()==28){
     250:	21 d4       	rcall	.+2114   	; 0xa94 <getDirX>
     252:	4c 97       	sbiw	r24, 0x1c	; 28
     254:	31 f4       	brne	.+12     	; 0x262 <__vector_2+0x9e>
			setDirX(20);
     256:	84 e1       	ldi	r24, 0x14	; 20
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	17 d4       	rcall	.+2094   	; 0xa8a <setDirX>
			arrow(getDirX());
     25c:	1b d4       	rcall	.+2102   	; 0xa94 <getDirX>
     25e:	b1 d5       	rcall	.+2914   	; 0xdc2 <arrow>
     260:	1d c0       	rjmp	.+58     	; 0x29c <__vector_2+0xd8>
		}
		else {
			setDirX(28);
     262:	8c e1       	ldi	r24, 0x1C	; 28
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	11 d4       	rcall	.+2082   	; 0xa8a <setDirX>
			arrow(getDirX());
     268:	15 d4       	rcall	.+2090   	; 0xa94 <getDirX>
     26a:	ab d5       	rcall	.+2902   	; 0xdc2 <arrow>
     26c:	17 c0       	rjmp	.+46     	; 0x29c <__vector_2+0xd8>
		}
	}
	
else if (count==1&&menu_mode==1){
     26e:	01 97       	sbiw	r24, 0x01	; 1
     270:	a9 f4       	brne	.+42     	; 0x29c <__vector_2+0xd8>
	if (minTemp<32)
     272:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     276:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     27a:	80 32       	cpi	r24, 0x20	; 32
     27c:	91 05       	cpc	r25, r1
     27e:	3c f4       	brge	.+14     	; 0x28e <__vector_2+0xca>
	{
		minTemp++;
     280:	01 96       	adiw	r24, 0x01	; 1
     282:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     286:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		menu_disp1_edit(minTemp);
     28a:	09 d4       	rcall	.+2066   	; 0xa9e <menu_disp1_edit>
     28c:	07 c0       	rjmp	.+14     	; 0x29c <__vector_2+0xd8>
	}
	else{ 
		minTemp=16;
     28e:	80 e1       	ldi	r24, 0x10	; 16
     290:	90 e0       	ldi	r25, 0x00	; 0
     292:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     296:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	    menu_disp1_edit(minTemp);
     29a:	01 d4       	rcall	.+2050   	; 0xa9e <menu_disp1_edit>
	}
}
	
}
     29c:	ff 91       	pop	r31
     29e:	ef 91       	pop	r30
     2a0:	bf 91       	pop	r27
     2a2:	af 91       	pop	r26
     2a4:	9f 91       	pop	r25
     2a6:	8f 91       	pop	r24
     2a8:	7f 91       	pop	r23
     2aa:	6f 91       	pop	r22
     2ac:	5f 91       	pop	r21
     2ae:	4f 91       	pop	r20
     2b0:	3f 91       	pop	r19
     2b2:	2f 91       	pop	r18
     2b4:	0f 90       	pop	r0
     2b6:	0b be       	out	0x3b, r0	; 59
     2b8:	0f 90       	pop	r0
     2ba:	0f be       	out	0x3f, r0	; 63
     2bc:	0f 90       	pop	r0
     2be:	1f 90       	pop	r1
     2c0:	18 95       	reti

000002c2 <__vector_3>:

ISR(INT2_vect){
     2c2:	1f 92       	push	r1
     2c4:	0f 92       	push	r0
     2c6:	0f b6       	in	r0, 0x3f	; 63
     2c8:	0f 92       	push	r0
     2ca:	11 24       	eor	r1, r1
     2cc:	0b b6       	in	r0, 0x3b	; 59
     2ce:	0f 92       	push	r0
     2d0:	2f 93       	push	r18
     2d2:	3f 93       	push	r19
     2d4:	4f 93       	push	r20
     2d6:	5f 93       	push	r21
     2d8:	6f 93       	push	r22
     2da:	7f 93       	push	r23
     2dc:	8f 93       	push	r24
     2de:	9f 93       	push	r25
     2e0:	af 93       	push	r26
     2e2:	bf 93       	push	r27
     2e4:	ef 93       	push	r30
     2e6:	ff 93       	push	r31
	
	if (count==0&&getDirX()==20){
     2e8:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <count>
     2ec:	90 91 95 03 	lds	r25, 0x0395	; 0x800395 <count+0x1>
     2f0:	89 2b       	or	r24, r25
     2f2:	91 f5       	brne	.+100    	; 0x358 <__vector_3+0x96>
     2f4:	cf d3       	rcall	.+1950   	; 0xa94 <getDirX>
     2f6:	44 97       	sbiw	r24, 0x14	; 20
     2f8:	c1 f4       	brne	.+48     	; 0x32a <__vector_3+0x68>
      count++; 
     2fa:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <count>
     2fe:	90 91 95 03 	lds	r25, 0x0395	; 0x800395 <count+0x1>
     302:	01 96       	adiw	r24, 0x01	; 1
     304:	90 93 95 03 	sts	0x0395, r25	; 0x800395 <count+0x1>
     308:	80 93 94 03 	sts	0x0394, r24	; 0x800394 <count>
	  menu_mode++;
     30c:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <__data_end>
     310:	90 91 93 03 	lds	r25, 0x0393	; 0x800393 <__data_end+0x1>
     314:	01 96       	adiw	r24, 0x01	; 1
     316:	90 93 93 03 	sts	0x0393, r25	; 0x800393 <__data_end+0x1>
     31a:	80 93 92 03 	sts	0x0392, r24	; 0x800392 <__data_end>
	  menu_disp1(minTemp);
     31e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     322:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     326:	e5 d4       	rcall	.+2506   	; 0xcf2 <menu_disp1>
	
}

ISR(INT2_vect){
	
	if (count==0&&getDirX()==20){
     328:	7e c0       	rjmp	.+252    	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
	  menu_mode++;
	  menu_disp1(minTemp);
	  
	}
	
	else if(count==0&&getDirX()==28){
     32a:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <count>
     32e:	90 91 95 03 	lds	r25, 0x0395	; 0x800395 <count+0x1>
     332:	89 2b       	or	r24, r25
     334:	89 f4       	brne	.+34     	; 0x358 <__vector_3+0x96>
     336:	ae d3       	rcall	.+1884   	; 0xa94 <getDirX>
     338:	4c 97       	sbiw	r24, 0x1c	; 28
     33a:	71 f4       	brne	.+28     	; 0x358 <__vector_3+0x96>
	count++;
     33c:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <count>
     340:	90 91 95 03 	lds	r25, 0x0395	; 0x800395 <count+0x1>
     344:	01 96       	adiw	r24, 0x01	; 1
     346:	90 93 95 03 	sts	0x0395, r25	; 0x800395 <count+0x1>
     34a:	80 93 94 03 	sts	0x0394, r24	; 0x800394 <count>
	setDirX(20);
     34e:	84 e1       	ldi	r24, 0x14	; 20
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	9b d3       	rcall	.+1846   	; 0xa8a <setDirX>
	menu_disp2();
     354:	3c d5       	rcall	.+2680   	; 0xdce <menu_disp2>
	  menu_mode++;
	  menu_disp1(minTemp);
	  
	}
	
	else if(count==0&&getDirX()==28){
     356:	67 c0       	rjmp	.+206    	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
	count++;
	setDirX(20);
	menu_disp2();
	}
	else if (count==1&&getDirX()==20&&menu_mode==0)
     358:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <count>
     35c:	90 91 95 03 	lds	r25, 0x0395	; 0x800395 <count+0x1>
     360:	01 97       	sbiw	r24, 0x01	; 1
     362:	09 f0       	breq	.+2      	; 0x366 <__vector_3+0xa4>
     364:	5c c0       	rjmp	.+184    	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     366:	96 d3       	rcall	.+1836   	; 0xa94 <getDirX>
     368:	44 97       	sbiw	r24, 0x14	; 20
     36a:	81 f4       	brne	.+32     	; 0x38c <__vector_3+0xca>
     36c:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <__data_end>
     370:	90 91 93 03 	lds	r25, 0x0393	; 0x800393 <__data_end+0x1>
     374:	89 2b       	or	r24, r25
     376:	51 f4       	brne	.+20     	; 0x38c <__vector_3+0xca>
	{
		//default mode chosen
		mod=DEF_MODE;
     378:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <DEF_MODE>
     37c:	90 91 9d 03 	lds	r25, 0x039D	; 0x80039d <DEF_MODE+0x1>
     380:	90 93 a0 03 	sts	0x03A0, r25	; 0x8003a0 <mod+0x1>
     384:	80 93 9f 03 	sts	0x039F, r24	; 0x80039f <mod>
		set_mode(mod);
     388:	fe d3       	rcall	.+2044   	; 0xb86 <set_mode>
	count++;
	setDirX(20);
	menu_disp2();
	}
	else if (count==1&&getDirX()==20&&menu_mode==0)
	{
     38a:	4d c0       	rjmp	.+154    	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
		mod=DEF_MODE;
		set_mode(mod);
		//count--;
		//menu_disp();
	}
	else if (count==1&&getDirX()==28&&menu_mode==0)
     38c:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <count>
     390:	90 91 95 03 	lds	r25, 0x0395	; 0x800395 <count+0x1>
     394:	01 97       	sbiw	r24, 0x01	; 1
     396:	09 f0       	breq	.+2      	; 0x39a <__vector_3+0xd8>
     398:	42 c0       	rjmp	.+132    	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     39a:	7c d3       	rcall	.+1784   	; 0xa94 <getDirX>
     39c:	4c 97       	sbiw	r24, 0x1c	; 28
     39e:	81 f4       	brne	.+32     	; 0x3c0 <__vector_3+0xfe>
     3a0:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <__data_end>
     3a4:	90 91 93 03 	lds	r25, 0x0393	; 0x800393 <__data_end+0x1>
     3a8:	89 2b       	or	r24, r25
     3aa:	51 f4       	brne	.+20     	; 0x3c0 <__vector_3+0xfe>
	{
		//window mode chosen
		mod=WIN_MODE;
     3ac:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <WIN_MODE>
     3b0:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <WIN_MODE+0x1>
     3b4:	90 93 a0 03 	sts	0x03A0, r25	; 0x8003a0 <mod+0x1>
     3b8:	80 93 9f 03 	sts	0x039F, r24	; 0x80039f <mod>
		set_mode(mod);
     3bc:	e4 d3       	rcall	.+1992   	; 0xb86 <set_mode>
		set_mode(mod);
		//count--;
		//menu_disp();
	}
	else if (count==1&&getDirX()==28&&menu_mode==0)
	{
     3be:	33 c0       	rjmp	.+102    	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
		//window mode chosen
		mod=WIN_MODE;
		set_mode(mod);
		//count--;
		//menu_disp();
	}else if (count==1&&getDirX()==36&&menu_mode==0)
     3c0:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <count>
     3c4:	90 91 95 03 	lds	r25, 0x0395	; 0x800395 <count+0x1>
     3c8:	01 97       	sbiw	r24, 0x01	; 1
     3ca:	49 f5       	brne	.+82     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     3cc:	63 d3       	rcall	.+1734   	; 0xa94 <getDirX>
     3ce:	84 97       	sbiw	r24, 0x24	; 36
     3d0:	81 f4       	brne	.+32     	; 0x3f2 <__vector_3+0x130>
     3d2:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <__data_end>
     3d6:	90 91 93 03 	lds	r25, 0x0393	; 0x800393 <__data_end+0x1>
     3da:	89 2b       	or	r24, r25
     3dc:	51 f4       	brne	.+20     	; 0x3f2 <__vector_3+0x130>
	{
		//cooler mode chosen
		mod=COOL_MODE;
     3de:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <COOL_MODE>
     3e2:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <COOL_MODE+0x1>
     3e6:	90 93 a0 03 	sts	0x03A0, r25	; 0x8003a0 <mod+0x1>
     3ea:	80 93 9f 03 	sts	0x039F, r24	; 0x80039f <mod>
		set_mode(mod);
     3ee:	cb d3       	rcall	.+1942   	; 0xb86 <set_mode>
		mod=WIN_MODE;
		set_mode(mod);
		//count--;
		//menu_disp();
	}else if (count==1&&getDirX()==36&&menu_mode==0)
	{
     3f0:	1a c0       	rjmp	.+52     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
		mod=COOL_MODE;
		set_mode(mod);
		//count--;
		//menu_disp();
	}
	else if (count==1&&menu_mode==1)
     3f2:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <count>
     3f6:	90 91 95 03 	lds	r25, 0x0395	; 0x800395 <count+0x1>
     3fa:	01 97       	sbiw	r24, 0x01	; 1
     3fc:	81 f4       	brne	.+32     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     3fe:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <__data_end>
     402:	90 91 93 03 	lds	r25, 0x0393	; 0x800393 <__data_end+0x1>
     406:	01 97       	sbiw	r24, 0x01	; 1
     408:	51 f4       	brne	.+20     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
	{
		targetTemp=minTemp;
     40a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     40e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     412:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <targetTemp+0x1>
     416:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <targetTemp>
	  set_targetTemp(targetTemp);
     41a:	56 d3       	rcall	.+1708   	; 0xac8 <set_targetTemp>
		set_mode(mod);
		//count--;
		//menu_disp();
	}
	else if (count==1&&menu_mode==1)
	{
     41c:	04 c0       	rjmp	.+8      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
		targetTemp=minTemp;
	  set_targetTemp(targetTemp);
	}
	
	else count=0;
     41e:	10 92 95 03 	sts	0x0395, r1	; 0x800395 <count+0x1>
     422:	10 92 94 03 	sts	0x0394, r1	; 0x800394 <count>
	
}
     426:	ff 91       	pop	r31
     428:	ef 91       	pop	r30
     42a:	bf 91       	pop	r27
     42c:	af 91       	pop	r26
     42e:	9f 91       	pop	r25
     430:	8f 91       	pop	r24
     432:	7f 91       	pop	r23
     434:	6f 91       	pop	r22
     436:	5f 91       	pop	r21
     438:	4f 91       	pop	r20
     43a:	3f 91       	pop	r19
     43c:	2f 91       	pop	r18
     43e:	0f 90       	pop	r0
     440:	0b be       	out	0x3b, r0	; 59
     442:	0f 90       	pop	r0
     444:	0f be       	out	0x3f, r0	; 63
     446:	0f 90       	pop	r0
     448:	1f 90       	pop	r1
     44a:	18 95       	reti

0000044c <__vector_4>:

ISR(INT3_vect){
     44c:	1f 92       	push	r1
     44e:	0f 92       	push	r0
     450:	0f b6       	in	r0, 0x3f	; 63
     452:	0f 92       	push	r0
     454:	11 24       	eor	r1, r1
     456:	0b b6       	in	r0, 0x3b	; 59
     458:	0f 92       	push	r0
     45a:	2f 93       	push	r18
     45c:	3f 93       	push	r19
     45e:	4f 93       	push	r20
     460:	5f 93       	push	r21
     462:	6f 93       	push	r22
     464:	7f 93       	push	r23
     466:	8f 93       	push	r24
     468:	9f 93       	push	r25
     46a:	af 93       	push	r26
     46c:	bf 93       	push	r27
     46e:	ef 93       	push	r30
     470:	ff 93       	push	r31
	line_clear(16,0);
     472:	60 e0       	ldi	r22, 0x00	; 0
     474:	70 e0       	ldi	r23, 0x00	; 0
     476:	80 e1       	ldi	r24, 0x10	; 16
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	ba d3       	rcall	.+1908   	; 0xbf0 <line_clear>
	menu_disp();
     47c:	cb d4       	rcall	.+2454   	; 0xe14 <menu_disp>
	count=0;
     47e:	10 92 95 03 	sts	0x0395, r1	; 0x800395 <count+0x1>
     482:	10 92 94 03 	sts	0x0394, r1	; 0x800394 <count>
	setDirX(20);
     486:	84 e1       	ldi	r24, 0x14	; 20
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	ff d2       	rcall	.+1534   	; 0xa8a <setDirX>
	menu_mode=0;
     48c:	10 92 93 03 	sts	0x0393, r1	; 0x800393 <__data_end+0x1>
     490:	10 92 92 03 	sts	0x0392, r1	; 0x800392 <__data_end>
}
     494:	ff 91       	pop	r31
     496:	ef 91       	pop	r30
     498:	bf 91       	pop	r27
     49a:	af 91       	pop	r26
     49c:	9f 91       	pop	r25
     49e:	8f 91       	pop	r24
     4a0:	7f 91       	pop	r23
     4a2:	6f 91       	pop	r22
     4a4:	5f 91       	pop	r21
     4a6:	4f 91       	pop	r20
     4a8:	3f 91       	pop	r19
     4aa:	2f 91       	pop	r18
     4ac:	0f 90       	pop	r0
     4ae:	0b be       	out	0x3b, r0	; 59
     4b0:	0f 90       	pop	r0
     4b2:	0f be       	out	0x3f, r0	; 63
     4b4:	0f 90       	pop	r0
     4b6:	1f 90       	pop	r1
     4b8:	18 95       	reti

000004ba <WinOpenClose>:
}


void WinOpenClose(int Win_stat, int action)
{
	if(action==1){
     4ba:	61 30       	cpi	r22, 0x01	; 1
     4bc:	71 05       	cpc	r23, r1
     4be:	09 f0       	breq	.+2      	; 0x4c2 <WinOpenClose+0x8>
     4c0:	4d c0       	rjmp	.+154    	; 0x55c <WinOpenClose+0xa2>
		if(Win_stat==0) //close
     4c2:	00 97       	sbiw	r24, 0x00	; 0
     4c4:	29 f5       	brne	.+74     	; 0x510 <WinOpenClose+0x56>
     4c6:	80 e4       	ldi	r24, 0x40	; 64
     4c8:	90 e0       	ldi	r25, 0x00	; 0
		for (int i=0; i<64;i++)
		{
			
			PORTB=0x06;
     4ca:	56 e0       	ldi	r21, 0x06	; 6
			_delay_ms(100);
			PORTB=0x03;
     4cc:	43 e0       	ldi	r20, 0x03	; 3
			_delay_ms(100);
			PORTB=0x09;
     4ce:	39 e0       	ldi	r19, 0x09	; 9
			_delay_ms(100);
			PORTB=0x0c;
     4d0:	2c e0       	ldi	r18, 0x0C	; 12
	if(action==1){
		if(Win_stat==0) //close
		for (int i=0; i<64;i++)
		{
			
			PORTB=0x06;
     4d2:	58 bb       	out	0x18, r21	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4d4:	e7 ea       	ldi	r30, 0xA7	; 167
     4d6:	f1 e6       	ldi	r31, 0x61	; 97
     4d8:	31 97       	sbiw	r30, 0x01	; 1
     4da:	f1 f7       	brne	.-4      	; 0x4d8 <WinOpenClose+0x1e>
     4dc:	00 c0       	rjmp	.+0      	; 0x4de <WinOpenClose+0x24>
     4de:	00 00       	nop
			_delay_ms(100);
			PORTB=0x03;
     4e0:	48 bb       	out	0x18, r20	; 24
     4e2:	e7 ea       	ldi	r30, 0xA7	; 167
     4e4:	f1 e6       	ldi	r31, 0x61	; 97
     4e6:	31 97       	sbiw	r30, 0x01	; 1
     4e8:	f1 f7       	brne	.-4      	; 0x4e6 <WinOpenClose+0x2c>
     4ea:	00 c0       	rjmp	.+0      	; 0x4ec <WinOpenClose+0x32>
     4ec:	00 00       	nop
			_delay_ms(100);
			PORTB=0x09;
     4ee:	38 bb       	out	0x18, r19	; 24
     4f0:	e7 ea       	ldi	r30, 0xA7	; 167
     4f2:	f1 e6       	ldi	r31, 0x61	; 97
     4f4:	31 97       	sbiw	r30, 0x01	; 1
     4f6:	f1 f7       	brne	.-4      	; 0x4f4 <WinOpenClose+0x3a>
     4f8:	00 c0       	rjmp	.+0      	; 0x4fa <WinOpenClose+0x40>
     4fa:	00 00       	nop
			_delay_ms(100);
			PORTB=0x0c;
     4fc:	28 bb       	out	0x18, r18	; 24
     4fe:	e7 ea       	ldi	r30, 0xA7	; 167
     500:	f1 e6       	ldi	r31, 0x61	; 97
     502:	31 97       	sbiw	r30, 0x01	; 1
     504:	f1 f7       	brne	.-4      	; 0x502 <WinOpenClose+0x48>
     506:	00 c0       	rjmp	.+0      	; 0x508 <WinOpenClose+0x4e>
     508:	00 00       	nop
     50a:	01 97       	sbiw	r24, 0x01	; 1

void WinOpenClose(int Win_stat, int action)
{
	if(action==1){
		if(Win_stat==0) //close
		for (int i=0; i<64;i++)
     50c:	11 f7       	brne	.-60     	; 0x4d2 <WinOpenClose+0x18>
     50e:	08 95       	ret
			PORTB=0x09;
			_delay_ms(100);
			PORTB=0x0c;
			_delay_ms(100);
		}
		else if(Win_stat==1)//open
     510:	01 97       	sbiw	r24, 0x01	; 1
     512:	21 f5       	brne	.+72     	; 0x55c <WinOpenClose+0xa2>
     514:	80 e4       	ldi	r24, 0x40	; 64
     516:	90 e0       	ldi	r25, 0x00	; 0
		for (int i=0; i<64;i++)
		{
			PORTB=0x06;
     518:	56 e0       	ldi	r21, 0x06	; 6
			_delay_ms(100);
			PORTB=0x0c;
     51a:	4c e0       	ldi	r20, 0x0C	; 12
			_delay_ms(100);
			PORTB=0x09;
     51c:	39 e0       	ldi	r19, 0x09	; 9
			_delay_ms(100);
			PORTB=0x03;
     51e:	23 e0       	ldi	r18, 0x03	; 3
			_delay_ms(100);
		}
		else if(Win_stat==1)//open
		for (int i=0; i<64;i++)
		{
			PORTB=0x06;
     520:	58 bb       	out	0x18, r21	; 24
     522:	e7 ea       	ldi	r30, 0xA7	; 167
     524:	f1 e6       	ldi	r31, 0x61	; 97
     526:	31 97       	sbiw	r30, 0x01	; 1
     528:	f1 f7       	brne	.-4      	; 0x526 <WinOpenClose+0x6c>
     52a:	00 c0       	rjmp	.+0      	; 0x52c <WinOpenClose+0x72>
     52c:	00 00       	nop
			_delay_ms(100);
			PORTB=0x0c;
     52e:	48 bb       	out	0x18, r20	; 24
     530:	e7 ea       	ldi	r30, 0xA7	; 167
     532:	f1 e6       	ldi	r31, 0x61	; 97
     534:	31 97       	sbiw	r30, 0x01	; 1
     536:	f1 f7       	brne	.-4      	; 0x534 <WinOpenClose+0x7a>
     538:	00 c0       	rjmp	.+0      	; 0x53a <WinOpenClose+0x80>
     53a:	00 00       	nop
			_delay_ms(100);
			PORTB=0x09;
     53c:	38 bb       	out	0x18, r19	; 24
     53e:	e7 ea       	ldi	r30, 0xA7	; 167
     540:	f1 e6       	ldi	r31, 0x61	; 97
     542:	31 97       	sbiw	r30, 0x01	; 1
     544:	f1 f7       	brne	.-4      	; 0x542 <WinOpenClose+0x88>
     546:	00 c0       	rjmp	.+0      	; 0x548 <WinOpenClose+0x8e>
     548:	00 00       	nop
			_delay_ms(100);
			PORTB=0x03;
     54a:	28 bb       	out	0x18, r18	; 24
     54c:	e7 ea       	ldi	r30, 0xA7	; 167
     54e:	f1 e6       	ldi	r31, 0x61	; 97
     550:	31 97       	sbiw	r30, 0x01	; 1
     552:	f1 f7       	brne	.-4      	; 0x550 <WinOpenClose+0x96>
     554:	00 c0       	rjmp	.+0      	; 0x556 <WinOpenClose+0x9c>
     556:	00 00       	nop
     558:	01 97       	sbiw	r24, 0x01	; 1
			_delay_ms(100);
			PORTB=0x0c;
			_delay_ms(100);
		}
		else if(Win_stat==1)//open
		for (int i=0; i<64;i++)
     55a:	11 f7       	brne	.-60     	; 0x520 <WinOpenClose+0x66>
     55c:	08 95       	ret

0000055e <CoolOpenClose>:
		}
	}
}

void CoolOpenClose(int Cool_stat,int action_cool){
	if(action_cool == 1){
     55e:	61 30       	cpi	r22, 0x01	; 1
     560:	71 05       	cpc	r23, r1
     562:	39 f4       	brne	.+14     	; 0x572 <CoolOpenClose+0x14>
		if(Cool_stat ==0){
     564:	00 97       	sbiw	r24, 0x00	; 0
     566:	11 f4       	brne	.+4      	; 0x56c <CoolOpenClose+0xe>
			PORTC &=0xFE;
     568:	a8 98       	cbi	0x15, 0	; 21
     56a:	08 95       	ret
		}
		else if (Cool_stat ==1){
     56c:	01 97       	sbiw	r24, 0x01	; 1
     56e:	09 f4       	brne	.+2      	; 0x572 <CoolOpenClose+0x14>
			PORTC |=0x01;
     570:	a8 9a       	sbi	0x15, 0	; 21
     572:	08 95       	ret

00000574 <manual>:
   int action_win=0;
   int action_cool = 0;
   
   	action_win = last_win_stat^Win_stat;
   	action_cool = last_cool_stat^Cool_stat;
   	WinOpenClose(Win_stat,action_win);
     574:	60 e0       	ldi	r22, 0x00	; 0
     576:	70 e0       	ldi	r23, 0x00	; 0
     578:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <Win_stat>
     57c:	90 91 97 03 	lds	r25, 0x0397	; 0x800397 <Win_stat+0x1>
     580:	9c df       	rcall	.-200    	; 0x4ba <WinOpenClose>
   	CoolOpenClose(Cool_stat,action_cool);
     582:	60 e0       	ldi	r22, 0x00	; 0
     584:	70 e0       	ldi	r23, 0x00	; 0
     586:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <Cool_stat>
     58a:	90 91 99 03 	lds	r25, 0x0399	; 0x800399 <Cool_stat+0x1>
     58e:	e7 cf       	rjmp	.-50     	; 0x55e <CoolOpenClose>
     590:	08 95       	ret

00000592 <closeAll>:
   
}

void closeAll(){
     592:	cf 93       	push	r28
     594:	df 93       	push	r29
	
	int last_win_stat = Win_stat;
     596:	60 91 96 03 	lds	r22, 0x0396	; 0x800396 <Win_stat>
     59a:	70 91 97 03 	lds	r23, 0x0397	; 0x800397 <Win_stat+0x1>
	int last_cool_stat= Cool_stat;
     59e:	c0 91 98 03 	lds	r28, 0x0398	; 0x800398 <Cool_stat>
     5a2:	d0 91 99 03 	lds	r29, 0x0399	; 0x800399 <Cool_stat+0x1>
	int action_win=0;
	int action_cool = 0;
	Win_stat=OFF;
     5a6:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <OFF>
     5aa:	90 91 9b 03 	lds	r25, 0x039B	; 0x80039b <OFF+0x1>
     5ae:	90 93 97 03 	sts	0x0397, r25	; 0x800397 <Win_stat+0x1>
     5b2:	80 93 96 03 	sts	0x0396, r24	; 0x800396 <Win_stat>
	Cool_stat=OFF;
     5b6:	90 93 99 03 	sts	0x0399, r25	; 0x800399 <Cool_stat+0x1>
     5ba:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <Cool_stat>
	action_win = last_win_stat^Win_stat;
	action_cool = last_cool_stat^Cool_stat;
     5be:	c8 27       	eor	r28, r24
     5c0:	d9 27       	eor	r29, r25
	int last_cool_stat= Cool_stat;
	int action_win=0;
	int action_cool = 0;
	Win_stat=OFF;
	Cool_stat=OFF;
	action_win = last_win_stat^Win_stat;
     5c2:	68 27       	eor	r22, r24
     5c4:	79 27       	eor	r23, r25
	action_cool = last_cool_stat^Cool_stat;
	
	WinOpenClose(Win_stat,action_win);
     5c6:	79 df       	rcall	.-270    	; 0x4ba <WinOpenClose>
	
	CoolOpenClose(Cool_stat,action_cool);
     5c8:	be 01       	movw	r22, r28
     5ca:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <Cool_stat>
     5ce:	90 91 99 03 	lds	r25, 0x0399	; 0x800399 <Cool_stat+0x1>
     5d2:	c5 df       	rcall	.-118    	; 0x55e <CoolOpenClose>
}
     5d4:	df 91       	pop	r29
     5d6:	cf 91       	pop	r28
     5d8:	08 95       	ret

000005da <defaultF>:

void delay(int x){
for (int i=0;i<x*1000;i++);
}

void defaultF(){
     5da:	cf 93       	push	r28
     5dc:	df 93       	push	r29
	// inside is hotter then target
	int last_win_stat = Win_stat;
     5de:	20 91 96 03 	lds	r18, 0x0396	; 0x800396 <Win_stat>
     5e2:	30 91 97 03 	lds	r19, 0x0397	; 0x800397 <Win_stat+0x1>
	int last_cool_stat= Cool_stat;
     5e6:	c0 91 98 03 	lds	r28, 0x0398	; 0x800398 <Cool_stat>
     5ea:	d0 91 99 03 	lds	r29, 0x0399	; 0x800399 <Cool_stat+0x1>
	int action_win=0;
	int action_cool = 0;
	if(targetTemp<TempIn){
     5ee:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <TempIn>
     5f2:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <TempIn+0x1>
     5f6:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <targetTemp>
     5fa:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <targetTemp+0x1>
     5fe:	48 17       	cp	r20, r24
     600:	59 07       	cpc	r21, r25
     602:	0c f0       	brlt	.+2      	; 0x606 <defaultF+0x2c>
     604:	44 c0       	rjmp	.+136    	; 0x68e <defaultF+0xb4>
		// inside is  hotter then outside
		if(TempOut<TempIn-1){
     606:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <TempOut>
     60a:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <TempOut+0x1>
     60e:	bc 01       	movw	r22, r24
     610:	61 50       	subi	r22, 0x01	; 1
     612:	71 09       	sbc	r23, r1
     614:	46 17       	cp	r20, r22
     616:	57 07       	cpc	r21, r23
     618:	8c f4       	brge	.+34     	; 0x63c <defaultF+0x62>
			Win_stat = ON;
     61a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <ON>
     61e:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <ON+0x1>
     622:	90 93 97 03 	sts	0x0397, r25	; 0x800397 <Win_stat+0x1>
     626:	80 93 96 03 	sts	0x0396, r24	; 0x800396 <Win_stat>
			Cool_stat = OFF;
     62a:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <OFF>
     62e:	90 91 9b 03 	lds	r25, 0x039B	; 0x80039b <OFF+0x1>
     632:	90 93 99 03 	sts	0x0399, r25	; 0x800399 <Cool_stat+0x1>
     636:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <Cool_stat>
     63a:	14 c0       	rjmp	.+40     	; 0x664 <defaultF+0x8a>
			
		}
		// inside is  equal or cooler then outside
		else if(TempOut>TempIn+1){
     63c:	01 96       	adiw	r24, 0x01	; 1
     63e:	84 17       	cp	r24, r20
     640:	95 07       	cpc	r25, r21
     642:	84 f4       	brge	.+32     	; 0x664 <defaultF+0x8a>
			Win_stat = OFF;
     644:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <OFF>
     648:	90 91 9b 03 	lds	r25, 0x039B	; 0x80039b <OFF+0x1>
     64c:	90 93 97 03 	sts	0x0397, r25	; 0x800397 <Win_stat+0x1>
     650:	80 93 96 03 	sts	0x0396, r24	; 0x800396 <Win_stat>
			Cool_stat = ON;
     654:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <ON>
     658:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <ON+0x1>
     65c:	90 93 99 03 	sts	0x0399, r25	; 0x800399 <Cool_stat+0x1>
     660:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <Cool_stat>
		}
	action_win=last_win_stat^Win_stat;
     664:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <Win_stat>
     668:	90 91 97 03 	lds	r25, 0x0397	; 0x800397 <Win_stat+0x1>
	action_cool = last_cool_stat^ Cool_stat;
     66c:	40 91 98 03 	lds	r20, 0x0398	; 0x800398 <Cool_stat>
     670:	50 91 99 03 	lds	r21, 0x0399	; 0x800399 <Cool_stat+0x1>
     674:	c4 27       	eor	r28, r20
     676:	d5 27       	eor	r29, r21
		// inside is  equal or cooler then outside
		else if(TempOut>TempIn+1){
			Win_stat = OFF;
			Cool_stat = ON;
		}
	action_win=last_win_stat^Win_stat;
     678:	bc 01       	movw	r22, r24
     67a:	62 27       	eor	r22, r18
     67c:	73 27       	eor	r23, r19
	action_cool = last_cool_stat^ Cool_stat;
	WinOpenClose(Win_stat,action_win);
     67e:	1d df       	rcall	.-454    	; 0x4ba <WinOpenClose>
	CoolOpenClose(Cool_stat,action_cool);
     680:	be 01       	movw	r22, r28
     682:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <Cool_stat>
     686:	90 91 99 03 	lds	r25, 0x0399	; 0x800399 <Cool_stat+0x1>
     68a:	69 df       	rcall	.-302    	; 0x55e <CoolOpenClose>
     68c:	01 c0       	rjmp	.+2      	; 0x690 <defaultF+0xb6>
	
	}
	else {
		closeAll();
     68e:	81 df       	rcall	.-254    	; 0x592 <closeAll>
	}
}
     690:	df 91       	pop	r29
     692:	cf 91       	pop	r28
     694:	08 95       	ret

00000696 <window>:

void window(){
     696:	cf 93       	push	r28
     698:	df 93       	push	r29
		int last_win_stat = Win_stat;
     69a:	60 91 96 03 	lds	r22, 0x0396	; 0x800396 <Win_stat>
     69e:	70 91 97 03 	lds	r23, 0x0397	; 0x800397 <Win_stat+0x1>
		int last_cool_stat= Cool_stat;
     6a2:	20 91 98 03 	lds	r18, 0x0398	; 0x800398 <Cool_stat>
     6a6:	30 91 99 03 	lds	r19, 0x0399	; 0x800399 <Cool_stat+0x1>
		int action_win=0;
		int action_cool = 0;
	Cool_stat = OFF;
     6aa:	c0 91 9a 03 	lds	r28, 0x039A	; 0x80039a <OFF>
     6ae:	d0 91 9b 03 	lds	r29, 0x039B	; 0x80039b <OFF+0x1>
     6b2:	d0 93 99 03 	sts	0x0399, r29	; 0x800399 <Cool_stat+0x1>
     6b6:	c0 93 98 03 	sts	0x0398, r28	; 0x800398 <Cool_stat>
	if(targetTemp<TempIn){
     6ba:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <TempIn>
     6be:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <TempIn+0x1>
     6c2:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <targetTemp>
     6c6:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <targetTemp+0x1>
     6ca:	48 17       	cp	r20, r24
     6cc:	59 07       	cpc	r21, r25
     6ce:	54 f5       	brge	.+84     	; 0x724 <window+0x8e>
		// inside is  hotter then outside
		if(TempOut<TempIn-1){
     6d0:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <TempOut>
     6d4:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <TempOut+0x1>
     6d8:	fc 01       	movw	r30, r24
     6da:	31 97       	sbiw	r30, 0x01	; 1
     6dc:	4e 17       	cp	r20, r30
     6de:	5f 07       	cpc	r21, r31
     6e0:	4c f4       	brge	.+18     	; 0x6f4 <window+0x5e>
			Win_stat = ON;
     6e2:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <ON>
     6e6:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <ON+0x1>
     6ea:	90 93 97 03 	sts	0x0397, r25	; 0x800397 <Win_stat+0x1>
     6ee:	80 93 96 03 	sts	0x0396, r24	; 0x800396 <Win_stat>
     6f2:	08 c0       	rjmp	.+16     	; 0x704 <window+0x6e>
		}
		// inside is  equal or cooler then outside
		else if(TempOut>=TempIn+1) {
     6f4:	01 96       	adiw	r24, 0x01	; 1
     6f6:	48 17       	cp	r20, r24
     6f8:	59 07       	cpc	r21, r25
     6fa:	24 f0       	brlt	.+8      	; 0x704 <window+0x6e>
			Win_stat = OFF;
     6fc:	d0 93 97 03 	sts	0x0397, r29	; 0x800397 <Win_stat+0x1>
     700:	c0 93 96 03 	sts	0x0396, r28	; 0x800396 <Win_stat>
		}
	action_win=last_win_stat^Win_stat;
     704:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <Win_stat>
     708:	90 91 97 03 	lds	r25, 0x0397	; 0x800397 <Win_stat+0x1>
	action_cool = last_cool_stat^ Cool_stat;
     70c:	c2 27       	eor	r28, r18
     70e:	d3 27       	eor	r29, r19
		}
		// inside is  equal or cooler then outside
		else if(TempOut>=TempIn+1) {
			Win_stat = OFF;
		}
	action_win=last_win_stat^Win_stat;
     710:	68 27       	eor	r22, r24
     712:	79 27       	eor	r23, r25
	action_cool = last_cool_stat^ Cool_stat;
	WinOpenClose(Win_stat,action_win);
     714:	d2 de       	rcall	.-604    	; 0x4ba <WinOpenClose>
	CoolOpenClose(Cool_stat,action_cool);
     716:	be 01       	movw	r22, r28
     718:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <Cool_stat>
     71c:	90 91 99 03 	lds	r25, 0x0399	; 0x800399 <Cool_stat+0x1>
     720:	1e df       	rcall	.-452    	; 0x55e <CoolOpenClose>
     722:	01 c0       	rjmp	.+2      	; 0x726 <window+0x90>

	}
	else {
		closeAll();
     724:	36 df       	rcall	.-404    	; 0x592 <closeAll>
	}
}
     726:	df 91       	pop	r29
     728:	cf 91       	pop	r28
     72a:	08 95       	ret

0000072c <cooler>:

void cooler(){
     72c:	cf 93       	push	r28
     72e:	df 93       	push	r29
	int last_win_stat = Win_stat;
     730:	60 91 96 03 	lds	r22, 0x0396	; 0x800396 <Win_stat>
     734:	70 91 97 03 	lds	r23, 0x0397	; 0x800397 <Win_stat+0x1>
	int last_cool_stat= Cool_stat;
     738:	20 91 98 03 	lds	r18, 0x0398	; 0x800398 <Cool_stat>
     73c:	30 91 99 03 	lds	r19, 0x0399	; 0x800399 <Cool_stat+0x1>
	int action_win=0;
	int action_cool = 0;
	Win_stat=OFF;
     740:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <OFF>
     744:	90 91 9b 03 	lds	r25, 0x039B	; 0x80039b <OFF+0x1>
     748:	90 93 97 03 	sts	0x0397, r25	; 0x800397 <Win_stat+0x1>
     74c:	80 93 96 03 	sts	0x0396, r24	; 0x800396 <Win_stat>
	if(targetTemp<TempIn){
     750:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <targetTemp>
     754:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <targetTemp+0x1>
     758:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <TempIn>
     75c:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <TempIn+0x1>
     760:	e4 17       	cp	r30, r20
     762:	f5 07       	cpc	r31, r21
     764:	a4 f4       	brge	.+40     	; 0x78e <cooler+0x62>
		// inside is  hotter then outside
	//	if(TempOut<TempIn){
			Cool_stat = ON;
     766:	c0 91 08 01 	lds	r28, 0x0108	; 0x800108 <ON>
     76a:	d0 91 09 01 	lds	r29, 0x0109	; 0x800109 <ON+0x1>
     76e:	d0 93 99 03 	sts	0x0399, r29	; 0x800399 <Cool_stat+0x1>
     772:	c0 93 98 03 	sts	0x0398, r28	; 0x800398 <Cool_stat>
		// inside is  equal or cooler then outside
	//	else if(TempIn<=TempOut){
	//		Cool_stat = OFF;
	//	}
	action_win = last_win_stat^Win_stat;
	action_cool = last_cool_stat^Cool_stat;
     776:	c2 27       	eor	r28, r18
     778:	d3 27       	eor	r29, r19
	//	}
		// inside is  equal or cooler then outside
	//	else if(TempIn<=TempOut){
	//		Cool_stat = OFF;
	//	}
	action_win = last_win_stat^Win_stat;
     77a:	68 27       	eor	r22, r24
     77c:	79 27       	eor	r23, r25
	action_cool = last_cool_stat^Cool_stat;
	WinOpenClose(Win_stat,action_win);
     77e:	9d de       	rcall	.-710    	; 0x4ba <WinOpenClose>
	CoolOpenClose(Cool_stat,action_cool);
     780:	be 01       	movw	r22, r28
     782:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <Cool_stat>
     786:	90 91 99 03 	lds	r25, 0x0399	; 0x800399 <Cool_stat+0x1>
     78a:	e9 de       	rcall	.-558    	; 0x55e <CoolOpenClose>
     78c:	01 c0       	rjmp	.+2      	; 0x790 <cooler+0x64>
	}

	else {closeAll();}
     78e:	01 df       	rcall	.-510    	; 0x592 <closeAll>
}
     790:	df 91       	pop	r29
     792:	cf 91       	pop	r28
     794:	08 95       	ret

00000796 <rec_process>:


void rec_process(char c){
	
	//temp
	if(c>65&&c<83)
     796:	9e eb       	ldi	r25, 0xBE	; 190
     798:	98 0f       	add	r25, r24
     79a:	91 31       	cpi	r25, 0x11	; 17
     79c:	20 f4       	brcc	.+8      	; 0x7a6 <rec_process+0x10>
	set_targetTemp(c-50);
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	c2 97       	sbiw	r24, 0x32	; 50
     7a2:	92 d1       	rcall	.+804    	; 0xac8 <set_targetTemp>
     7a4:	63 c0       	rjmp	.+198    	; 0x86c <rec_process+0xd6>
	//cooler
	else if (c==33){
     7a6:	81 32       	cpi	r24, 0x21	; 33
     7a8:	61 f4       	brne	.+24     	; 0x7c2 <rec_process+0x2c>
		Cool_stat=OFF;
     7aa:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <OFF>
     7ae:	90 91 9b 03 	lds	r25, 0x039B	; 0x80039b <OFF+0x1>
     7b2:	90 93 99 03 	sts	0x0399, r25	; 0x800399 <Cool_stat+0x1>
     7b6:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <Cool_stat>
	    CoolOpenClose(Cool_stat,1);
     7ba:	61 e0       	ldi	r22, 0x01	; 1
     7bc:	70 e0       	ldi	r23, 0x00	; 0
     7be:	cf de       	rcall	.-610    	; 0x55e <CoolOpenClose>
     7c0:	55 c0       	rjmp	.+170    	; 0x86c <rec_process+0xd6>
	}
	else if (c==34){
     7c2:	82 32       	cpi	r24, 0x22	; 34
     7c4:	61 f4       	brne	.+24     	; 0x7de <rec_process+0x48>
		Cool_stat=ON;
     7c6:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <ON>
     7ca:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <ON+0x1>
     7ce:	90 93 99 03 	sts	0x0399, r25	; 0x800399 <Cool_stat+0x1>
     7d2:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <Cool_stat>
	    CoolOpenClose(Cool_stat,1);		
     7d6:	61 e0       	ldi	r22, 0x01	; 1
     7d8:	70 e0       	ldi	r23, 0x00	; 0
     7da:	c1 de       	rcall	.-638    	; 0x55e <CoolOpenClose>
     7dc:	47 c0       	rjmp	.+142    	; 0x86c <rec_process+0xd6>
	}
	// window
	else if (c==35){
     7de:	83 32       	cpi	r24, 0x23	; 35
     7e0:	61 f4       	brne	.+24     	; 0x7fa <rec_process+0x64>
		Win_stat=OFF;
     7e2:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <OFF>
     7e6:	90 91 9b 03 	lds	r25, 0x039B	; 0x80039b <OFF+0x1>
     7ea:	90 93 97 03 	sts	0x0397, r25	; 0x800397 <Win_stat+0x1>
     7ee:	80 93 96 03 	sts	0x0396, r24	; 0x800396 <Win_stat>
	WinOpenClose(Win_stat,1);
     7f2:	61 e0       	ldi	r22, 0x01	; 1
     7f4:	70 e0       	ldi	r23, 0x00	; 0
     7f6:	61 de       	rcall	.-830    	; 0x4ba <WinOpenClose>
     7f8:	39 c0       	rjmp	.+114    	; 0x86c <rec_process+0xd6>
	}
	else if (c==36){
     7fa:	84 32       	cpi	r24, 0x24	; 36
     7fc:	61 f4       	brne	.+24     	; 0x816 <rec_process+0x80>
		Win_stat=ON;
     7fe:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <ON>
     802:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <ON+0x1>
     806:	90 93 97 03 	sts	0x0397, r25	; 0x800397 <Win_stat+0x1>
     80a:	80 93 96 03 	sts	0x0396, r24	; 0x800396 <Win_stat>
	WinOpenClose(Win_stat,1);	
     80e:	61 e0       	ldi	r22, 0x01	; 1
     810:	70 e0       	ldi	r23, 0x00	; 0
     812:	53 de       	rcall	.-858    	; 0x4ba <WinOpenClose>
     814:	2b c0       	rjmp	.+86     	; 0x86c <rec_process+0xd6>
	}
	
	// mode
	else if (c==37){
     816:	85 32       	cpi	r24, 0x25	; 37
     818:	49 f4       	brne	.+18     	; 0x82c <rec_process+0x96>
		mod=DEF_MODE;
     81a:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <DEF_MODE>
     81e:	90 91 9d 03 	lds	r25, 0x039D	; 0x80039d <DEF_MODE+0x1>
     822:	90 93 a0 03 	sts	0x03A0, r25	; 0x8003a0 <mod+0x1>
     826:	80 93 9f 03 	sts	0x039F, r24	; 0x80039f <mod>
     82a:	20 c0       	rjmp	.+64     	; 0x86c <rec_process+0xd6>
		
	}
	else if (c==38){
     82c:	86 32       	cpi	r24, 0x26	; 38
     82e:	49 f4       	brne	.+18     	; 0x842 <rec_process+0xac>
		mod = WIN_MODE;
     830:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <WIN_MODE>
     834:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <WIN_MODE+0x1>
     838:	90 93 a0 03 	sts	0x03A0, r25	; 0x8003a0 <mod+0x1>
     83c:	80 93 9f 03 	sts	0x039F, r24	; 0x80039f <mod>
     840:	15 c0       	rjmp	.+42     	; 0x86c <rec_process+0xd6>
		
	}
	else if (c==39){
     842:	87 32       	cpi	r24, 0x27	; 39
     844:	49 f4       	brne	.+18     	; 0x858 <rec_process+0xc2>
		mod=COOL_MODE;
     846:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <COOL_MODE>
     84a:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <COOL_MODE+0x1>
     84e:	90 93 a0 03 	sts	0x03A0, r25	; 0x8003a0 <mod+0x1>
     852:	80 93 9f 03 	sts	0x039F, r24	; 0x80039f <mod>
     856:	0a c0       	rjmp	.+20     	; 0x86c <rec_process+0xd6>
			}
	else if (c==40){
     858:	88 32       	cpi	r24, 0x28	; 40
     85a:	41 f4       	brne	.+16     	; 0x86c <rec_process+0xd6>
		mod=MAN_MODE;
     85c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <MAN_MODE>
     860:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <MAN_MODE+0x1>
     864:	90 93 a0 03 	sts	0x03A0, r25	; 0x8003a0 <mod+0x1>
     868:	80 93 9f 03 	sts	0x039F, r24	; 0x80039f <mod>
	}
    
	//default_lcd_disp();
	set_mode(mod);
     86c:	80 91 9f 03 	lds	r24, 0x039F	; 0x80039f <mod>
     870:	90 91 a0 03 	lds	r25, 0x03A0	; 0x8003a0 <mod+0x1>
     874:	88 c1       	rjmp	.+784    	; 0xb86 <set_mode>
     876:	08 95       	ret

00000878 <usart1_init>:
	}
}

void usart1_init()
{
	UBRR1H = 0;
     878:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	UBRR1L = 96;
     87c:	80 e6       	ldi	r24, 0x60	; 96
     87e:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
	UCSR1B = (1 << RXEN1) | (1 << TXEN1) | (1 << RXCIE1) | (UDRE1); //(1 << TXCIE1)
     882:	8d e9       	ldi	r24, 0x9D	; 157
     884:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
	UCSR1C = (1 << USBS1) | (1 << UCSZ11) | (1 << UCSZ10);
     888:	8e e0       	ldi	r24, 0x0E	; 14
     88a:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
	sei();
     88e:	78 94       	sei
     890:	08 95       	ret

00000892 <main>:
int count=0;
int minTemp=16, menu_mode=0;

int main(void)
{
	mod=DEF_MODE;
     892:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <DEF_MODE>
     896:	90 91 9d 03 	lds	r25, 0x039D	; 0x80039d <DEF_MODE+0x1>
     89a:	90 93 a0 03 	sts	0x03A0, r25	; 0x8003a0 <mod+0x1>
     89e:	80 93 9f 03 	sts	0x039F, r24	; 0x80039f <mod>
	
	
	DDRB = 0xFF; //stepper
     8a2:	8f ef       	ldi	r24, 0xFF	; 255
     8a4:	87 bb       	out	0x17, r24	; 23
	
	DDRA = 0xFF; // GLCD
     8a6:	8a bb       	out	0x1a, r24	; 26
	DDRE = 0xFF; // GLCD
     8a8:	82 b9       	out	0x02, r24	; 2
	
	DDRC =0xFF; // for  and Cooler for PINC0
     8aa:	84 bb       	out	0x14, r24	; 20
	DDRF = 0;  //input INTERRUPT ADC
     8ac:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	
	DDRD=0;//button input
     8b0:	11 ba       	out	0x11, r1	; 17
    
	lcd_init();
     8b2:	6a d4       	rcall	.+2260   	; 0x1188 <lcd_init>
	lcd_clear();
     8b4:	57 d4       	rcall	.+2222   	; 0x1164 <lcd_clear>
     
    usart1_init();
     8b6:	e0 df       	rcall	.-64     	; 0x878 <usart1_init>
//  button input
	
	EIMSK = (1<<INT0)|(1<<INT1)|(1<<INT2)|(1<<INT3);
     8b8:	8f e0       	ldi	r24, 0x0F	; 15
     8ba:	89 bf       	out	0x39, r24	; 57
	EICRA=0x02;
     8bc:	82 e0       	ldi	r24, 0x02	; 2
     8be:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	sei();
     8c2:	78 94       	sei

//  temp input

   //char s[1];
   ADCSRA = 0x87;
     8c4:	87 e8       	ldi	r24, 0x87	; 135
     8c6:	86 b9       	out	0x06, r24	; 6
   ADMUX =(1<<REFS1)|(1<<REFS0)|(1<<ADLAR);
     8c8:	80 ee       	ldi	r24, 0xE0	; 224
     8ca:	87 b9       	out	0x07, r24	; 7
//
menu_disp();
     8cc:	a3 d2       	rcall	.+1350   	; 0xe14 <menu_disp>
set_mode(mod);
     8ce:	80 91 9f 03 	lds	r24, 0x039F	; 0x80039f <mod>
     8d2:	90 91 a0 03 	lds	r25, 0x03A0	; 0x8003a0 <mod+0x1>
     8d6:	57 d1       	rcall	.+686    	; 0xb86 <set_mode>
set_targetTemp(targetTemp);
     8d8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <targetTemp>
     8dc:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <targetTemp+0x1>
     8e0:	f3 d0       	rcall	.+486    	; 0xac8 <set_targetTemp>

// logo_bluetooth(40,26);
 default_lcd_disp();
     8e2:	71 d3       	rcall	.+1762   	; 0xfc6 <default_lcd_disp>
			cooler();
	else if (mod==MAN_MODE)
	        manual();
	delay(100);
     
	 data[0]=mod+'0';
     8e4:	c1 ea       	ldi	r28, 0xA1	; 161
     8e6:	d3 e0       	ldi	r29, 0x03	; 3
     8e8:	0f 2e       	mov	r0, r31
     8ea:	ff e9       	ldi	r31, 0x9F	; 159
     8ec:	af 2e       	mov	r10, r31
     8ee:	f3 e0       	ldi	r31, 0x03	; 3
     8f0:	bf 2e       	mov	r11, r31
     8f2:	f0 2d       	mov	r31, r0
	 data[1]=Cool_stat+'0';
     8f4:	0f 2e       	mov	r0, r31
     8f6:	f8 e9       	ldi	r31, 0x98	; 152
     8f8:	cf 2e       	mov	r12, r31
     8fa:	f3 e0       	ldi	r31, 0x03	; 3
     8fc:	df 2e       	mov	r13, r31
     8fe:	f0 2d       	mov	r31, r0
	 data[2]=Win_stat+'0';
     900:	0f 2e       	mov	r0, r31
     902:	f6 e9       	ldi	r31, 0x96	; 150
     904:	ef 2e       	mov	r14, r31
     906:	f3 e0       	ldi	r31, 0x03	; 3
     908:	ff 2e       	mov	r15, r31
     90a:	f0 2d       	mov	r31, r0
	 data[3]=targetTemp/10+'0';
     90c:	0a e0       	ldi	r16, 0x0A	; 10
     90e:	10 e0       	ldi	r17, 0x00	; 0
 default_lcd_disp();
  while(1){
	 
//    _delay_ms(4000);

   ADMUX|=0b00000001;
     910:	38 9a       	sbi	0x07, 0	; 7
   ADCSRA |= (1<<ADSC);
     912:	36 9a       	sbi	0x06, 6	; 6
   while((ADCSRA&(1<<ADIF))==0);
     914:	34 9b       	sbis	0x06, 4	; 6
     916:	fe cf       	rjmp	.-4      	; 0x914 <main+0x82>
   TempIn = ADCH;
     918:	85 b1       	in	r24, 0x05	; 5
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <TempIn+0x1>
     920:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <TempIn>
   temp_disp(ADCH);
     924:	85 b1       	in	r24, 0x05	; 5
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	ed d0       	rcall	.+474    	; 0xb04 <temp_disp>
   ADMUX&=0b11111110;
     92a:	38 98       	cbi	0x07, 0	; 7
//------------------------
   ADMUX|=0b00000010;
     92c:	39 9a       	sbi	0x07, 1	; 7
	ADCSRA |= (1<<ADSC);
     92e:	36 9a       	sbi	0x06, 6	; 6
	while((ADCSRA&(1<<ADIF))==0);
     930:	34 9b       	sbis	0x06, 4	; 6
     932:	fe cf       	rjmp	.-4      	; 0x930 <main+0x9e>
	TempOut = ADCH;
     934:	85 b1       	in	r24, 0x05	; 5
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <TempOut+0x1>
     93c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <TempOut>
    temp_disp2(ADCH);
     940:	85 b1       	in	r24, 0x05	; 5
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	7c d3       	rcall	.+1784   	; 0x103e <temp_disp2>
	ADMUX&=0b11111101;
     946:	39 98       	cbi	0x07, 1	; 7
//-------------------------
	
    if(mod==DEF_MODE)
     948:	80 91 9f 03 	lds	r24, 0x039F	; 0x80039f <mod>
     94c:	90 91 a0 03 	lds	r25, 0x03A0	; 0x8003a0 <mod+0x1>
     950:	20 91 9c 03 	lds	r18, 0x039C	; 0x80039c <DEF_MODE>
     954:	30 91 9d 03 	lds	r19, 0x039D	; 0x80039d <DEF_MODE+0x1>
     958:	82 17       	cp	r24, r18
     95a:	93 07       	cpc	r25, r19
     95c:	11 f4       	brne	.+4      	; 0x962 <main+0xd0>
			defaultF();
     95e:	3d de       	rcall	.-902    	; 0x5da <defaultF>
     960:	1a c0       	rjmp	.+52     	; 0x996 <main+0x104>
	else if (mod ==WIN_MODE)
     962:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <WIN_MODE>
     966:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <WIN_MODE+0x1>
     96a:	82 17       	cp	r24, r18
     96c:	93 07       	cpc	r25, r19
     96e:	11 f4       	brne	.+4      	; 0x974 <main+0xe2>
			window();
     970:	92 de       	rcall	.-732    	; 0x696 <window>
     972:	11 c0       	rjmp	.+34     	; 0x996 <main+0x104>
	else if (mod==COOL_MODE)
     974:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <COOL_MODE>
     978:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <COOL_MODE+0x1>
     97c:	82 17       	cp	r24, r18
     97e:	93 07       	cpc	r25, r19
     980:	11 f4       	brne	.+4      	; 0x986 <main+0xf4>
			cooler();
     982:	d4 de       	rcall	.-600    	; 0x72c <cooler>
     984:	08 c0       	rjmp	.+16     	; 0x996 <main+0x104>
	else if (mod==MAN_MODE)
     986:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <MAN_MODE>
     98a:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <MAN_MODE+0x1>
     98e:	82 17       	cp	r24, r18
     990:	93 07       	cpc	r25, r19
     992:	09 f4       	brne	.+2      	; 0x996 <main+0x104>
	        manual();
     994:	ef dd       	rcall	.-1058   	; 0x574 <manual>
	delay(100);
     
	 data[0]=mod+'0';
     996:	f5 01       	movw	r30, r10
     998:	80 81       	ld	r24, Z
     99a:	80 5d       	subi	r24, 0xD0	; 208
     99c:	88 83       	st	Y, r24
	 data[1]=Cool_stat+'0';
     99e:	f6 01       	movw	r30, r12
     9a0:	80 81       	ld	r24, Z
     9a2:	80 5d       	subi	r24, 0xD0	; 208
     9a4:	89 83       	std	Y+1, r24	; 0x01
	 data[2]=Win_stat+'0';
     9a6:	f7 01       	movw	r30, r14
     9a8:	80 81       	ld	r24, Z
     9aa:	80 5d       	subi	r24, 0xD0	; 208
     9ac:	8a 83       	std	Y+2, r24	; 0x02
	 data[3]=targetTemp/10+'0';
     9ae:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <targetTemp>
     9b2:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <targetTemp+0x1>
     9b6:	b8 01       	movw	r22, r16
     9b8:	ef d7       	rcall	.+4062   	; 0x1998 <__divmodhi4>
     9ba:	60 5d       	subi	r22, 0xD0	; 208
     9bc:	6b 83       	std	Y+3, r22	; 0x03
	 data[4]=targetTemp%10+'0';
     9be:	80 5d       	subi	r24, 0xD0	; 208
     9c0:	8c 83       	std	Y+4, r24	; 0x04
	 data[5]=TempIn/10+'0';
     9c2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <TempIn>
     9c6:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <TempIn+0x1>
     9ca:	b8 01       	movw	r22, r16
     9cc:	e5 d7       	rcall	.+4042   	; 0x1998 <__divmodhi4>
     9ce:	60 5d       	subi	r22, 0xD0	; 208
     9d0:	6d 83       	std	Y+5, r22	; 0x05
	 data[6]=TempIn%10+'0';
     9d2:	80 5d       	subi	r24, 0xD0	; 208
     9d4:	8e 83       	std	Y+6, r24	; 0x06
	 data[7]=TempOut/10+'0';
     9d6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <TempOut>
     9da:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <TempOut+0x1>
     9de:	b8 01       	movw	r22, r16
     9e0:	db d7       	rcall	.+4022   	; 0x1998 <__divmodhi4>
     9e2:	60 5d       	subi	r22, 0xD0	; 208
     9e4:	6f 83       	std	Y+7, r22	; 0x07
	 data[8]=TempOut%10+'0';
     9e6:	80 5d       	subi	r24, 0xD0	; 208
     9e8:	88 87       	std	Y+8, r24	; 0x08
	 data[9]='\0';
     9ea:	19 86       	std	Y+9, r1	; 0x09
	 
//	 Update(data);
	 
}
     9ec:	91 cf       	rjmp	.-222    	; 0x910 <main+0x7e>

000009ee <usart1_data_transmit>:
	UCSR1C = (1 << USBS1) | (1 << UCSZ11) | (1 << UCSZ10);
	sei();
}
void usart1_data_transmit(unsigned char data )
{
	while (!(UCSR1A & (1 << UDRE1)));
     9ee:	eb e9       	ldi	r30, 0x9B	; 155
     9f0:	f0 e0       	ldi	r31, 0x00	; 0
     9f2:	90 81       	ld	r25, Z
     9f4:	95 ff       	sbrs	r25, 5
     9f6:	fd cf       	rjmp	.-6      	; 0x9f2 <usart1_data_transmit+0x4>
	UDR1 = data;
     9f8:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
     9fc:	89 ef       	ldi	r24, 0xF9	; 249
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	01 97       	sbiw	r24, 0x01	; 1
     a02:	f1 f7       	brne	.-4      	; 0xa00 <usart1_data_transmit+0x12>
     a04:	00 c0       	rjmp	.+0      	; 0xa06 <usart1_data_transmit+0x18>
     a06:	00 00       	nop
     a08:	08 95       	ret

00000a0a <usart1_string_transmit>:
	_delay_ms(1);
}

void usart1_string_transmit(char *string)
{
     a0a:	cf 93       	push	r28
     a0c:	df 93       	push	r29
     a0e:	ec 01       	movw	r28, r24
	while(*string)
     a10:	88 81       	ld	r24, Y
     a12:	88 23       	and	r24, r24
     a14:	29 f0       	breq	.+10     	; 0xa20 <usart1_string_transmit+0x16>
     a16:	21 96       	adiw	r28, 0x01	; 1
	{
		usart1_data_transmit(*string++);
     a18:	ea df       	rcall	.-44     	; 0x9ee <usart1_data_transmit>
	_delay_ms(1);
}

void usart1_string_transmit(char *string)
{
	while(*string)
     a1a:	89 91       	ld	r24, Y+
     a1c:	81 11       	cpse	r24, r1
     a1e:	fc cf       	rjmp	.-8      	; 0xa18 <usart1_string_transmit+0xe>
	{
		usart1_data_transmit(*string++);
	}
}
     a20:	df 91       	pop	r29
     a22:	cf 91       	pop	r28
     a24:	08 95       	ret

00000a26 <__vector_30>:
		_delay_ms(4000);
		
}
*/

ISR(USART1_RX_vect){
     a26:	1f 92       	push	r1
     a28:	0f 92       	push	r0
     a2a:	0f b6       	in	r0, 0x3f	; 63
     a2c:	0f 92       	push	r0
     a2e:	11 24       	eor	r1, r1
     a30:	0b b6       	in	r0, 0x3b	; 59
     a32:	0f 92       	push	r0
     a34:	2f 93       	push	r18
     a36:	3f 93       	push	r19
     a38:	4f 93       	push	r20
     a3a:	5f 93       	push	r21
     a3c:	6f 93       	push	r22
     a3e:	7f 93       	push	r23
     a40:	8f 93       	push	r24
     a42:	9f 93       	push	r25
     a44:	af 93       	push	r26
     a46:	bf 93       	push	r27
     a48:	ef 93       	push	r30
     a4a:	ff 93       	push	r31
	
	command=UDR1;
     a4c:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
     a50:	80 93 9e 03 	sts	0x039E, r24	; 0x80039e <command>
	
if(command==41)
     a54:	89 32       	cpi	r24, 0x29	; 41
     a56:	21 f4       	brne	.+8      	; 0xa60 <__vector_30+0x3a>
	usart1_string_transmit(data);
     a58:	81 ea       	ldi	r24, 0xA1	; 161
     a5a:	93 e0       	ldi	r25, 0x03	; 3
     a5c:	d6 df       	rcall	.-84     	; 0xa0a <usart1_string_transmit>
     a5e:	02 c0       	rjmp	.+4      	; 0xa64 <__vector_30+0x3e>
else
	rec_process(command);
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	99 de       	rcall	.-718    	; 0x796 <rec_process>

}
     a64:	ff 91       	pop	r31
     a66:	ef 91       	pop	r30
     a68:	bf 91       	pop	r27
     a6a:	af 91       	pop	r26
     a6c:	9f 91       	pop	r25
     a6e:	8f 91       	pop	r24
     a70:	7f 91       	pop	r23
     a72:	6f 91       	pop	r22
     a74:	5f 91       	pop	r21
     a76:	4f 91       	pop	r20
     a78:	3f 91       	pop	r19
     a7a:	2f 91       	pop	r18
     a7c:	0f 90       	pop	r0
     a7e:	0b be       	out	0x3b, r0	; 59
     a80:	0f 90       	pop	r0
     a82:	0f be       	out	0x3f, r0	; 63
     a84:	0f 90       	pop	r0
     a86:	1f 90       	pop	r1
     a88:	18 95       	reti

00000a8a <setDirX>:
		for (j=0; j<7; j++)
		{
			GLCD_Dot_Out(x+i,y+j);
		}
	}
}
     a8a:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <dirx+0x1>
     a8e:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <dirx>
     a92:	08 95       	ret

00000a94 <getDirX>:
     a94:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <dirx>
     a98:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <dirx+0x1>
     a9c:	08 95       	ret

00000a9e <menu_disp1_edit>:
     a9e:	cf 93       	push	r28
     aa0:	df 93       	push	r29
     aa2:	00 d0       	rcall	.+0      	; 0xaa4 <menu_disp1_edit+0x6>
     aa4:	cd b7       	in	r28, 0x3d	; 61
     aa6:	de b7       	in	r29, 0x3e	; 62
     aa8:	4a e0       	ldi	r20, 0x0A	; 10
     aaa:	be 01       	movw	r22, r28
     aac:	6f 5f       	subi	r22, 0xFF	; 255
     aae:	7f 4f       	sbci	r23, 0xFF	; 255
     ab0:	9a d7       	rcall	.+3892   	; 0x19e6 <__itoa_ncheck>
     ab2:	ae 01       	movw	r20, r28
     ab4:	4f 5f       	subi	r20, 0xFF	; 255
     ab6:	5f 4f       	sbci	r21, 0xFF	; 255
     ab8:	62 e0       	ldi	r22, 0x02	; 2
     aba:	83 e0       	ldi	r24, 0x03	; 3
     abc:	b1 d3       	rcall	.+1890   	; 0x1220 <lcd_string>
     abe:	0f 90       	pop	r0
     ac0:	0f 90       	pop	r0
     ac2:	df 91       	pop	r29
     ac4:	cf 91       	pop	r28
     ac6:	08 95       	ret

00000ac8 <set_targetTemp>:
     ac8:	cf 93       	push	r28
     aca:	df 93       	push	r29
     acc:	00 d0       	rcall	.+0      	; 0xace <set_targetTemp+0x6>
     ace:	cd b7       	in	r28, 0x3d	; 61
     ad0:	de b7       	in	r29, 0x3e	; 62
     ad2:	4a e0       	ldi	r20, 0x0A	; 10
     ad4:	be 01       	movw	r22, r28
     ad6:	6f 5f       	subi	r22, 0xFF	; 255
     ad8:	7f 4f       	sbci	r23, 0xFF	; 255
     ada:	85 d7       	rcall	.+3850   	; 0x19e6 <__itoa_ncheck>
     adc:	ae 01       	movw	r20, r28
     ade:	4f 5f       	subi	r20, 0xFF	; 255
     ae0:	5f 4f       	sbci	r21, 0xFF	; 255
     ae2:	6f e0       	ldi	r22, 0x0F	; 15
     ae4:	85 e0       	ldi	r24, 0x05	; 5
     ae6:	9c d3       	rcall	.+1848   	; 0x1220 <lcd_string>
     ae8:	41 e0       	ldi	r20, 0x01	; 1
     aea:	6c e6       	ldi	r22, 0x6C	; 108
     aec:	89 e2       	ldi	r24, 0x29	; 41
     aee:	0c d5       	rcall	.+2584   	; 0x1508 <GLCD_Circle>
     af0:	47 e0       	ldi	r20, 0x07	; 7
     af2:	53 e0       	ldi	r21, 0x03	; 3
     af4:	62 e1       	ldi	r22, 0x12	; 18
     af6:	85 e0       	ldi	r24, 0x05	; 5
     af8:	93 d3       	rcall	.+1830   	; 0x1220 <lcd_string>
     afa:	0f 90       	pop	r0
     afc:	0f 90       	pop	r0
     afe:	df 91       	pop	r29
     b00:	cf 91       	pop	r28
     b02:	08 95       	ret

00000b04 <temp_disp>:
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	cf 93       	push	r28
     b0a:	df 93       	push	r29
     b0c:	00 d0       	rcall	.+0      	; 0xb0e <temp_disp+0xa>
     b0e:	1f 92       	push	r1
     b10:	cd b7       	in	r28, 0x3d	; 61
     b12:	de b7       	in	r29, 0x3e	; 62
     b14:	8c 01       	movw	r16, r24
     b16:	4a e0       	ldi	r20, 0x0A	; 10
     b18:	be 01       	movw	r22, r28
     b1a:	6f 5f       	subi	r22, 0xFF	; 255
     b1c:	7f 4f       	sbci	r23, 0xFF	; 255
     b1e:	63 d7       	rcall	.+3782   	; 0x19e6 <__itoa_ncheck>
     b20:	04 36       	cpi	r16, 0x64	; 100
     b22:	11 05       	cpc	r17, r1
     b24:	8c f4       	brge	.+34     	; 0xb48 <temp_disp+0x44>
     b26:	0a 30       	cpi	r16, 0x0A	; 10
     b28:	11 05       	cpc	r17, r1
     b2a:	3c f0       	brlt	.+14     	; 0xb3a <temp_disp+0x36>
     b2c:	ae 01       	movw	r20, r28
     b2e:	4f 5f       	subi	r20, 0xFF	; 255
     b30:	5f 4f       	sbci	r21, 0xFF	; 255
     b32:	6f e0       	ldi	r22, 0x0F	; 15
     b34:	80 e0       	ldi	r24, 0x00	; 0
     b36:	74 d3       	rcall	.+1768   	; 0x1220 <lcd_string>
     b38:	0c c0       	rjmp	.+24     	; 0xb52 <temp_disp+0x4e>
     b3a:	ae 01       	movw	r20, r28
     b3c:	4f 5f       	subi	r20, 0xFF	; 255
     b3e:	5f 4f       	sbci	r21, 0xFF	; 255
     b40:	60 e1       	ldi	r22, 0x10	; 16
     b42:	80 e0       	ldi	r24, 0x00	; 0
     b44:	6d d3       	rcall	.+1754   	; 0x1220 <lcd_string>
     b46:	05 c0       	rjmp	.+10     	; 0xb52 <temp_disp+0x4e>
     b48:	49 e0       	ldi	r20, 0x09	; 9
     b4a:	53 e0       	ldi	r21, 0x03	; 3
     b4c:	6f e0       	ldi	r22, 0x0F	; 15
     b4e:	80 e0       	ldi	r24, 0x00	; 0
     b50:	67 d3       	rcall	.+1742   	; 0x1220 <lcd_string>
     b52:	0f 90       	pop	r0
     b54:	0f 90       	pop	r0
     b56:	0f 90       	pop	r0
     b58:	df 91       	pop	r29
     b5a:	cf 91       	pop	r28
     b5c:	1f 91       	pop	r17
     b5e:	0f 91       	pop	r16
     b60:	08 95       	ret

00000b62 <mode_clear>:
     b62:	cf 93       	push	r28
     b64:	df 93       	push	r29
     b66:	d8 e1       	ldi	r29, 0x18	; 24
     b68:	09 c0       	rjmp	.+18     	; 0xb7c <mode_clear+0x1a>
     b6a:	6c 2f       	mov	r22, r28
     b6c:	8d 2f       	mov	r24, r29
     b6e:	e4 d3       	rcall	.+1992   	; 0x1338 <GLCD_Dot_Out>
     b70:	cf 5f       	subi	r28, 0xFF	; 255
     b72:	cf 37       	cpi	r28, 0x7F	; 127
     b74:	d1 f7       	brne	.-12     	; 0xb6a <mode_clear+0x8>
     b76:	df 5f       	subi	r29, 0xFF	; 255
     b78:	d0 32       	cpi	r29, 0x20	; 32
     b7a:	11 f0       	breq	.+4      	; 0xb80 <mode_clear+0x1e>
     b7c:	ca e5       	ldi	r28, 0x5A	; 90
     b7e:	f5 cf       	rjmp	.-22     	; 0xb6a <mode_clear+0x8>
     b80:	df 91       	pop	r29
     b82:	cf 91       	pop	r28
     b84:	08 95       	ret

00000b86 <set_mode>:
     b86:	cf 93       	push	r28
     b88:	df 93       	push	r29
     b8a:	ec 01       	movw	r28, r24
     b8c:	ea df       	rcall	.-44     	; 0xb62 <mode_clear>
     b8e:	cc 0f       	add	r28, r28
     b90:	dd 1f       	adc	r29, r29
     b92:	c0 5f       	subi	r28, 0xF0	; 240
     b94:	de 4f       	sbci	r29, 0xFE	; 254
     b96:	48 81       	ld	r20, Y
     b98:	59 81       	ldd	r21, Y+1	; 0x01
     b9a:	6f e0       	ldi	r22, 0x0F	; 15
     b9c:	83 e0       	ldi	r24, 0x03	; 3
     b9e:	40 d3       	rcall	.+1664   	; 0x1220 <lcd_string>
     ba0:	df 91       	pop	r29
     ba2:	cf 91       	pop	r28
     ba4:	08 95       	ret

00000ba6 <title_clear>:

void title_clear(){
     ba6:	1f 93       	push	r17
     ba8:	cf 93       	push	r28
     baa:	df 93       	push	r29
     bac:	d0 e0       	ldi	r29, 0x00	; 0
     bae:	10 e0       	ldi	r17, 0x00	; 0
     bb0:	09 c0       	rjmp	.+18     	; 0xbc4 <title_clear+0x1e>
	int i,j;
	for (i=0; i <8; i++)
	{
		for (j=0; j<87; j++)
		{
			GLCD_Dot_Out(i,j);
     bb2:	6c 2f       	mov	r22, r28
     bb4:	8d 2f       	mov	r24, r29
     bb6:	c0 d3       	rcall	.+1920   	; 0x1338 <GLCD_Dot_Out>
     bb8:	cf 5f       	subi	r28, 0xFF	; 255

void title_clear(){
	int i,j;
	for (i=0; i <8; i++)
	{
		for (j=0; j<87; j++)
     bba:	c7 35       	cpi	r28, 0x57	; 87
     bbc:	d1 f7       	brne	.-12     	; 0xbb2 <title_clear+0xc>
     bbe:	df 5f       	subi	r29, 0xFF	; 255
	}
}

void title_clear(){
	int i,j;
	for (i=0; i <8; i++)
     bc0:	d8 30       	cpi	r29, 0x08	; 8
     bc2:	11 f0       	breq	.+4      	; 0xbc8 <title_clear+0x22>
			GLCD_Dot_Out(x+i,y+j);
		}
	}
}

void title_clear(){
     bc4:	c1 2f       	mov	r28, r17
     bc6:	f5 cf       	rjmp	.-22     	; 0xbb2 <title_clear+0xc>
		for (j=0; j<87; j++)
		{
			GLCD_Dot_Out(i,j);
		}
	}
}
     bc8:	df 91       	pop	r29
     bca:	cf 91       	pop	r28
     bcc:	1f 91       	pop	r17
     bce:	08 95       	ret

00000bd0 <setTitle>:
	lcd_string(7,14,"back");
	//
	
}

void setTitle(int t){
     bd0:	cf 93       	push	r28
     bd2:	df 93       	push	r29
     bd4:	ec 01       	movw	r28, r24
	title_clear();
     bd6:	e7 df       	rcall	.-50     	; 0xba6 <title_clear>
	lcd_string(0,0,title[t]);
     bd8:	cc 0f       	add	r28, r28
     bda:	dd 1f       	adc	r29, r29
     bdc:	ca 5d       	subi	r28, 0xDA	; 218
     bde:	de 4f       	sbci	r29, 0xFE	; 254
     be0:	48 81       	ld	r20, Y
     be2:	59 81       	ldd	r21, Y+1	; 0x01
     be4:	60 e0       	ldi	r22, 0x00	; 0
     be6:	80 e0       	ldi	r24, 0x00	; 0
     be8:	1b d3       	rcall	.+1590   	; 0x1220 <lcd_string>
}
     bea:	df 91       	pop	r29
     bec:	cf 91       	pop	r28
     bee:	08 95       	ret

00000bf0 <line_clear>:
			GLCD_Dot_Out(i,j);
		}
	}
}

void line_clear(int x, int y){
     bf0:	ff 92       	push	r15
     bf2:	0f 93       	push	r16
     bf4:	1f 93       	push	r17
     bf6:	cf 93       	push	r28
     bf8:	df 93       	push	r29
     bfa:	d8 2f       	mov	r29, r24
     bfc:	08 e1       	ldi	r16, 0x18	; 24
     bfe:	08 0f       	add	r16, r24
     c00:	f6 2e       	mov	r15, r22
     c02:	17 e5       	ldi	r17, 0x57	; 87
     c04:	16 0f       	add	r17, r22
     c06:	09 c0       	rjmp	.+18     	; 0xc1a <line_clear+0x2a>
	int i,j;
	for (i=0; i <24; i++)
	{
		for (j=0; j<87; j++)
		{
			GLCD_Dot_Out(x+i,y+j);
     c08:	6c 2f       	mov	r22, r28
     c0a:	8d 2f       	mov	r24, r29
     c0c:	95 d3       	rcall	.+1834   	; 0x1338 <GLCD_Dot_Out>
     c0e:	cf 5f       	subi	r28, 0xFF	; 255

void line_clear(int x, int y){
	int i,j;
	for (i=0; i <24; i++)
	{
		for (j=0; j<87; j++)
     c10:	c1 13       	cpse	r28, r17
     c12:	fa cf       	rjmp	.-12     	; 0xc08 <line_clear+0x18>
     c14:	df 5f       	subi	r29, 0xFF	; 255
	}
}

void line_clear(int x, int y){
	int i,j;
	for (i=0; i <24; i++)
     c16:	d0 17       	cp	r29, r16
     c18:	11 f0       	breq	.+4      	; 0xc1e <line_clear+0x2e>
     c1a:	cf 2d       	mov	r28, r15
     c1c:	f5 cf       	rjmp	.-22     	; 0xc08 <line_clear+0x18>
		for (j=0; j<87; j++)
		{
			GLCD_Dot_Out(x+i,y+j);
		}
	}
}
     c1e:	df 91       	pop	r29
     c20:	cf 91       	pop	r28
     c22:	1f 91       	pop	r17
     c24:	0f 91       	pop	r16
     c26:	ff 90       	pop	r15
     c28:	08 95       	ret

00000c2a <triangle_up>:

void triangle_up(int x,int y){
     c2a:	af 92       	push	r10
     c2c:	bf 92       	push	r11
     c2e:	cf 92       	push	r12
     c30:	df 92       	push	r13
     c32:	ef 92       	push	r14
     c34:	ff 92       	push	r15
     c36:	0f 93       	push	r16
     c38:	1f 93       	push	r17
     c3a:	cf 93       	push	r28
     c3c:	df 93       	push	r29
     c3e:	e8 2e       	mov	r14, r24
     c40:	5b 01       	movw	r10, r22
	for (int i=0; i<4;i++){
     c42:	c1 2c       	mov	r12, r1
     c44:	d1 2c       	mov	r13, r1
     c46:	e5 01       	movw	r28, r10
     c48:	cc 19       	sub	r28, r12
     c4a:	dd 09       	sbc	r29, r13
     c4c:	85 01       	movw	r16, r10
     c4e:	0c 0d       	add	r16, r12
     c50:	1d 1d       	adc	r17, r13
		for(int s=y-i; s<=y+i; s++)
     c52:	0c 17       	cp	r16, r28
     c54:	1d 07       	cpc	r17, r29
     c56:	4c f0       	brlt	.+18     	; 0xc6a <triangle_up+0x40>
     c58:	fc 2c       	mov	r15, r12
     c5a:	fe 0c       	add	r15, r14
		GLCD_Dot(x+i,s);
     c5c:	6c 2f       	mov	r22, r28
     c5e:	8f 2d       	mov	r24, r15
     c60:	0b d3       	rcall	.+1558   	; 0x1278 <GLCD_Dot>
	}
}

void triangle_up(int x,int y){
	for (int i=0; i<4;i++){
		for(int s=y-i; s<=y+i; s++)
     c62:	21 96       	adiw	r28, 0x01	; 1
     c64:	0c 17       	cp	r16, r28
     c66:	1d 07       	cpc	r17, r29
     c68:	cc f7       	brge	.-14     	; 0xc5c <triangle_up+0x32>
		}
	}
}

void triangle_up(int x,int y){
	for (int i=0; i<4;i++){
     c6a:	8f ef       	ldi	r24, 0xFF	; 255
     c6c:	c8 1a       	sub	r12, r24
     c6e:	d8 0a       	sbc	r13, r24
     c70:	84 e0       	ldi	r24, 0x04	; 4
     c72:	c8 16       	cp	r12, r24
     c74:	d1 04       	cpc	r13, r1
     c76:	39 f7       	brne	.-50     	; 0xc46 <triangle_up+0x1c>
		for(int s=y-i; s<=y+i; s++)
		GLCD_Dot(x+i,s);
	}
}
     c78:	df 91       	pop	r29
     c7a:	cf 91       	pop	r28
     c7c:	1f 91       	pop	r17
     c7e:	0f 91       	pop	r16
     c80:	ff 90       	pop	r15
     c82:	ef 90       	pop	r14
     c84:	df 90       	pop	r13
     c86:	cf 90       	pop	r12
     c88:	bf 90       	pop	r11
     c8a:	af 90       	pop	r10
     c8c:	08 95       	ret

00000c8e <triangle_down>:

void triangle_down(int x,int y){
     c8e:	af 92       	push	r10
     c90:	bf 92       	push	r11
     c92:	cf 92       	push	r12
     c94:	df 92       	push	r13
     c96:	ef 92       	push	r14
     c98:	ff 92       	push	r15
     c9a:	0f 93       	push	r16
     c9c:	1f 93       	push	r17
     c9e:	cf 93       	push	r28
     ca0:	df 93       	push	r29
     ca2:	e8 2e       	mov	r14, r24
     ca4:	5b 01       	movw	r10, r22
	for (int i=0; i<4;i++){
     ca6:	c1 2c       	mov	r12, r1
     ca8:	d1 2c       	mov	r13, r1
     caa:	e5 01       	movw	r28, r10
     cac:	cc 19       	sub	r28, r12
     cae:	dd 09       	sbc	r29, r13
     cb0:	85 01       	movw	r16, r10
     cb2:	0c 0d       	add	r16, r12
     cb4:	1d 1d       	adc	r17, r13
		for(int s=y-i; s<=y+i; s++)
     cb6:	0c 17       	cp	r16, r28
     cb8:	1d 07       	cpc	r17, r29
     cba:	4c f0       	brlt	.+18     	; 0xcce <triangle_down+0x40>
     cbc:	fe 2c       	mov	r15, r14
     cbe:	fc 18       	sub	r15, r12
		GLCD_Dot(x-i,s);
     cc0:	6c 2f       	mov	r22, r28
     cc2:	8f 2d       	mov	r24, r15
     cc4:	d9 d2       	rcall	.+1458   	; 0x1278 <GLCD_Dot>
	}
}

void triangle_down(int x,int y){
	for (int i=0; i<4;i++){
		for(int s=y-i; s<=y+i; s++)
     cc6:	21 96       	adiw	r28, 0x01	; 1
     cc8:	0c 17       	cp	r16, r28
     cca:	1d 07       	cpc	r17, r29
     ccc:	cc f7       	brge	.-14     	; 0xcc0 <triangle_down+0x32>
		GLCD_Dot(x+i,s);
	}
}

void triangle_down(int x,int y){
	for (int i=0; i<4;i++){
     cce:	8f ef       	ldi	r24, 0xFF	; 255
     cd0:	c8 1a       	sub	r12, r24
     cd2:	d8 0a       	sbc	r13, r24
     cd4:	84 e0       	ldi	r24, 0x04	; 4
     cd6:	c8 16       	cp	r12, r24
     cd8:	d1 04       	cpc	r13, r1
     cda:	39 f7       	brne	.-50     	; 0xcaa <triangle_down+0x1c>
		for(int s=y-i; s<=y+i; s++)
		GLCD_Dot(x-i,s);
	}
}
     cdc:	df 91       	pop	r29
     cde:	cf 91       	pop	r28
     ce0:	1f 91       	pop	r17
     ce2:	0f 91       	pop	r16
     ce4:	ff 90       	pop	r15
     ce6:	ef 90       	pop	r14
     ce8:	df 90       	pop	r13
     cea:	cf 90       	pop	r12
     cec:	bf 90       	pop	r11
     cee:	af 90       	pop	r10
     cf0:	08 95       	ret

00000cf2 <menu_disp1>:
	lcd_string(4,1,mode_menu[2]);
	arrow(dirx);
	
}

void menu_disp1(int t){
     cf2:	0f 93       	push	r16
     cf4:	1f 93       	push	r17
     cf6:	cf 93       	push	r28
     cf8:	df 93       	push	r29
     cfa:	00 d0       	rcall	.+0      	; 0xcfc <menu_disp1+0xa>
     cfc:	cd b7       	in	r28, 0x3d	; 61
     cfe:	de b7       	in	r29, 0x3e	; 62
     d00:	8c 01       	movw	r16, r24
	char *temp[1];

	setTitle(1);
     d02:	81 e0       	ldi	r24, 0x01	; 1
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	64 df       	rcall	.-312    	; 0xbd0 <setTitle>
	
	line_clear(16,0);
     d08:	60 e0       	ldi	r22, 0x00	; 0
     d0a:	70 e0       	ldi	r23, 0x00	; 0
     d0c:	80 e1       	ldi	r24, 0x10	; 16
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	6f df       	rcall	.-290    	; 0xbf0 <line_clear>
	triangle_up(20,11);
     d12:	6b e0       	ldi	r22, 0x0B	; 11
     d14:	70 e0       	ldi	r23, 0x00	; 0
     d16:	84 e1       	ldi	r24, 0x14	; 20
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	87 df       	rcall	.-242    	; 0xc2a <triangle_up>
	triangle_down(34,11);
     d1c:	6b e0       	ldi	r22, 0x0B	; 11
     d1e:	70 e0       	ldi	r23, 0x00	; 0
     d20:	82 e2       	ldi	r24, 0x22	; 34
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	b4 df       	rcall	.-152    	; 0xc8e <triangle_down>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     d26:	4a e0       	ldi	r20, 0x0A	; 10
     d28:	be 01       	movw	r22, r28
     d2a:	6f 5f       	subi	r22, 0xFF	; 255
     d2c:	7f 4f       	sbci	r23, 0xFF	; 255
     d2e:	c8 01       	movw	r24, r16
     d30:	5a d6       	rcall	.+3252   	; 0x19e6 <__itoa_ncheck>
	itoa(t,temp,10);
	lcd_string(3,2,temp);
     d32:	ae 01       	movw	r20, r28
     d34:	4f 5f       	subi	r20, 0xFF	; 255
     d36:	5f 4f       	sbci	r21, 0xFF	; 255
     d38:	62 e0       	ldi	r22, 0x02	; 2
     d3a:	83 e0       	ldi	r24, 0x03	; 3
     d3c:	71 d2       	rcall	.+1250   	; 0x1220 <lcd_string>
	GLCD_Circle(25,31,1);
     d3e:	41 e0       	ldi	r20, 0x01	; 1
     d40:	6f e1       	ldi	r22, 0x1F	; 31
     d42:	89 e1       	ldi	r24, 0x19	; 25
     d44:	e1 d3       	rcall	.+1986   	; 0x1508 <GLCD_Circle>
	lcd_string(3,5,"C");
     d46:	47 e0       	ldi	r20, 0x07	; 7
     d48:	53 e0       	ldi	r21, 0x03	; 3
     d4a:	65 e0       	ldi	r22, 0x05	; 5
     d4c:	83 e0       	ldi	r24, 0x03	; 3
     d4e:	68 d2       	rcall	.+1232   	; 0x1220 <lcd_string>
}
     d50:	0f 90       	pop	r0
     d52:	0f 90       	pop	r0
     d54:	df 91       	pop	r29
     d56:	cf 91       	pop	r28
     d58:	1f 91       	pop	r17
     d5a:	0f 91       	pop	r16
     d5c:	08 95       	ret

00000d5e <triangle_right>:
	for (int i=0; i<4;i++){
		for(int s=y-i; s<=y+i; s++)
		GLCD_Dot(x-i,s);
	}
}
void triangle_right(int x,int y){
     d5e:	af 92       	push	r10
     d60:	bf 92       	push	r11
     d62:	cf 92       	push	r12
     d64:	df 92       	push	r13
     d66:	ef 92       	push	r14
     d68:	ff 92       	push	r15
     d6a:	0f 93       	push	r16
     d6c:	1f 93       	push	r17
     d6e:	cf 93       	push	r28
     d70:	df 93       	push	r29
     d72:	5c 01       	movw	r10, r24
     d74:	e6 2e       	mov	r14, r22
	for (int i=0; i<4;i++){
     d76:	c1 2c       	mov	r12, r1
     d78:	d1 2c       	mov	r13, r1
     d7a:	e5 01       	movw	r28, r10
     d7c:	cc 19       	sub	r28, r12
     d7e:	dd 09       	sbc	r29, r13
     d80:	85 01       	movw	r16, r10
     d82:	0c 0d       	add	r16, r12
     d84:	1d 1d       	adc	r17, r13
		for(int s=x-i; s<=x+i; s++)
     d86:	0c 17       	cp	r16, r28
     d88:	1d 07       	cpc	r17, r29
     d8a:	4c f0       	brlt	.+18     	; 0xd9e <triangle_right+0x40>
     d8c:	fe 2c       	mov	r15, r14
     d8e:	fc 18       	sub	r15, r12
		GLCD_Dot(s,y-i);
     d90:	6f 2d       	mov	r22, r15
     d92:	8c 2f       	mov	r24, r28
     d94:	71 d2       	rcall	.+1250   	; 0x1278 <GLCD_Dot>
		GLCD_Dot(x-i,s);
	}
}
void triangle_right(int x,int y){
	for (int i=0; i<4;i++){
		for(int s=x-i; s<=x+i; s++)
     d96:	21 96       	adiw	r28, 0x01	; 1
     d98:	0c 17       	cp	r16, r28
     d9a:	1d 07       	cpc	r17, r29
     d9c:	cc f7       	brge	.-14     	; 0xd90 <triangle_right+0x32>
		for(int s=y-i; s<=y+i; s++)
		GLCD_Dot(x-i,s);
	}
}
void triangle_right(int x,int y){
	for (int i=0; i<4;i++){
     d9e:	8f ef       	ldi	r24, 0xFF	; 255
     da0:	c8 1a       	sub	r12, r24
     da2:	d8 0a       	sbc	r13, r24
     da4:	84 e0       	ldi	r24, 0x04	; 4
     da6:	c8 16       	cp	r12, r24
     da8:	d1 04       	cpc	r13, r1
     daa:	39 f7       	brne	.-50     	; 0xd7a <triangle_right+0x1c>
		for(int s=x-i; s<=x+i; s++)
		GLCD_Dot(s,y-i);
	}
}
     dac:	df 91       	pop	r29
     dae:	cf 91       	pop	r28
     db0:	1f 91       	pop	r17
     db2:	0f 91       	pop	r16
     db4:	ff 90       	pop	r15
     db6:	ef 90       	pop	r14
     db8:	df 90       	pop	r13
     dba:	cf 90       	pop	r12
     dbc:	bf 90       	pop	r11
     dbe:	af 90       	pop	r10
     dc0:	08 95       	ret

00000dc2 <arrow>:
		}
	}
}

void arrow(int x){
	triangle_right(x,diry);
     dc2:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <diry>
     dc6:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <diry+0x1>
     dca:	c9 cf       	rjmp	.-110    	; 0xd5e <triangle_right>
     dcc:	08 95       	ret

00000dce <menu_disp2>:
void setDirX(int x){dirx =x;}
int	getDirX(){return dirx;}
void setDirY(int y){diry =y;}
int getDirY(){return diry;}
	
void menu_disp2(){
     dce:	cf 93       	push	r28
     dd0:	df 93       	push	r29
	
	setTitle(2);
     dd2:	82 e0       	ldi	r24, 0x02	; 2
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	fc de       	rcall	.-520    	; 0xbd0 <setTitle>
	
	line_clear(16,0);
     dd8:	60 e0       	ldi	r22, 0x00	; 0
     dda:	70 e0       	ldi	r23, 0x00	; 0
     ddc:	80 e1       	ldi	r24, 0x10	; 16
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	07 df       	rcall	.-498    	; 0xbf0 <line_clear>
	lcd_string(2,1,mode_menu[0]);
     de2:	cc e1       	ldi	r28, 0x1C	; 28
     de4:	d1 e0       	ldi	r29, 0x01	; 1
     de6:	48 81       	ld	r20, Y
     de8:	59 81       	ldd	r21, Y+1	; 0x01
     dea:	61 e0       	ldi	r22, 0x01	; 1
     dec:	82 e0       	ldi	r24, 0x02	; 2
     dee:	18 d2       	rcall	.+1072   	; 0x1220 <lcd_string>
	lcd_string(3,1,mode_menu[1]);
     df0:	4a 81       	ldd	r20, Y+2	; 0x02
     df2:	5b 81       	ldd	r21, Y+3	; 0x03
     df4:	61 e0       	ldi	r22, 0x01	; 1
     df6:	83 e0       	ldi	r24, 0x03	; 3
     df8:	13 d2       	rcall	.+1062   	; 0x1220 <lcd_string>
	lcd_string(4,1,mode_menu[2]);
     dfa:	4c 81       	ldd	r20, Y+4	; 0x04
     dfc:	5d 81       	ldd	r21, Y+5	; 0x05
     dfe:	61 e0       	ldi	r22, 0x01	; 1
     e00:	84 e0       	ldi	r24, 0x04	; 4
     e02:	0e d2       	rcall	.+1052   	; 0x1220 <lcd_string>
	arrow(dirx);
     e04:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <dirx>
     e08:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <dirx+0x1>
     e0c:	da df       	rcall	.-76     	; 0xdc2 <arrow>
	
}
     e0e:	df 91       	pop	r29
     e10:	cf 91       	pop	r28
     e12:	08 95       	ret

00000e14 <menu_disp>:
	char *temp[1];
	itoa(t,temp,10);
	lcd_string(3,2,temp);
}

void menu_disp(){
     e14:	cf 93       	push	r28
     e16:	df 93       	push	r29
	
	setTitle(0);
     e18:	80 e0       	ldi	r24, 0x00	; 0
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	d9 de       	rcall	.-590    	; 0xbd0 <setTitle>
	dirx=20;
     e1e:	84 e1       	ldi	r24, 0x14	; 20
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <dirx+0x1>
     e26:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <dirx>
	lcd_string(2,1,main_menu[0]);
     e2a:	c2 e2       	ldi	r28, 0x22	; 34
     e2c:	d1 e0       	ldi	r29, 0x01	; 1
     e2e:	48 81       	ld	r20, Y
     e30:	59 81       	ldd	r21, Y+1	; 0x01
     e32:	61 e0       	ldi	r22, 0x01	; 1
     e34:	82 e0       	ldi	r24, 0x02	; 2
     e36:	f4 d1       	rcall	.+1000   	; 0x1220 <lcd_string>
	lcd_string(3,1,main_menu[1]);
     e38:	4a 81       	ldd	r20, Y+2	; 0x02
     e3a:	5b 81       	ldd	r21, Y+3	; 0x03
     e3c:	61 e0       	ldi	r22, 0x01	; 1
     e3e:	83 e0       	ldi	r24, 0x03	; 3
     e40:	ef d1       	rcall	.+990    	; 0x1220 <lcd_string>
	arrow(dirx);
     e42:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <dirx>
     e46:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <dirx+0x1>
     e4a:	bb df       	rcall	.-138    	; 0xdc2 <arrow>
	
}
     e4c:	df 91       	pop	r29
     e4e:	cf 91       	pop	r28
     e50:	08 95       	ret

00000e52 <triangle_right_clear>:
		for(int s=x-i; s<=x+i; s++)
		GLCD_Dot(s,y-i);
	}
}

void triangle_right_clear(int x,int y){
     e52:	af 92       	push	r10
     e54:	bf 92       	push	r11
     e56:	cf 92       	push	r12
     e58:	df 92       	push	r13
     e5a:	ef 92       	push	r14
     e5c:	ff 92       	push	r15
     e5e:	0f 93       	push	r16
     e60:	1f 93       	push	r17
     e62:	cf 93       	push	r28
     e64:	df 93       	push	r29
     e66:	5c 01       	movw	r10, r24
     e68:	e6 2e       	mov	r14, r22
	for (int i=0; i<4;i++){
     e6a:	c1 2c       	mov	r12, r1
     e6c:	d1 2c       	mov	r13, r1
     e6e:	e5 01       	movw	r28, r10
     e70:	cc 19       	sub	r28, r12
     e72:	dd 09       	sbc	r29, r13
     e74:	85 01       	movw	r16, r10
     e76:	0c 0d       	add	r16, r12
     e78:	1d 1d       	adc	r17, r13
		for(int s=x-i; s<=x+i; s++)
     e7a:	0c 17       	cp	r16, r28
     e7c:	1d 07       	cpc	r17, r29
     e7e:	4c f0       	brlt	.+18     	; 0xe92 <triangle_right_clear+0x40>
     e80:	fe 2c       	mov	r15, r14
     e82:	fc 18       	sub	r15, r12
		GLCD_Dot_Out(s,y-i);
     e84:	6f 2d       	mov	r22, r15
     e86:	8c 2f       	mov	r24, r28
     e88:	57 d2       	rcall	.+1198   	; 0x1338 <GLCD_Dot_Out>
	}
}

void triangle_right_clear(int x,int y){
	for (int i=0; i<4;i++){
		for(int s=x-i; s<=x+i; s++)
     e8a:	21 96       	adiw	r28, 0x01	; 1
     e8c:	0c 17       	cp	r16, r28
     e8e:	1d 07       	cpc	r17, r29
     e90:	cc f7       	brge	.-14     	; 0xe84 <triangle_right_clear+0x32>
		GLCD_Dot(s,y-i);
	}
}

void triangle_right_clear(int x,int y){
	for (int i=0; i<4;i++){
     e92:	8f ef       	ldi	r24, 0xFF	; 255
     e94:	c8 1a       	sub	r12, r24
     e96:	d8 0a       	sbc	r13, r24
     e98:	84 e0       	ldi	r24, 0x04	; 4
     e9a:	c8 16       	cp	r12, r24
     e9c:	d1 04       	cpc	r13, r1
     e9e:	39 f7       	brne	.-50     	; 0xe6e <triangle_right_clear+0x1c>
		for(int s=x-i; s<=x+i; s++)
		GLCD_Dot_Out(s,y-i);
	}
}
     ea0:	df 91       	pop	r29
     ea2:	cf 91       	pop	r28
     ea4:	1f 91       	pop	r17
     ea6:	0f 91       	pop	r16
     ea8:	ff 90       	pop	r15
     eaa:	ef 90       	pop	r14
     eac:	df 90       	pop	r13
     eae:	cf 90       	pop	r12
     eb0:	bf 90       	pop	r11
     eb2:	af 90       	pop	r10
     eb4:	08 95       	ret

00000eb6 <arrow_clr>:
void arrow(int x){
	triangle_right(x,diry);
}

void arrow_clr(int x){
	triangle_right_clear(x,diry);
     eb6:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <diry>
     eba:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <diry+0x1>
     ebe:	c9 cf       	rjmp	.-110    	; 0xe52 <triangle_right_clear>
     ec0:	08 95       	ret

00000ec2 <triangle_left>:
		for(int s=x-i; s<=x+i; s++)
		GLCD_Dot_Out(s,y-i);
	}
}

void triangle_left(int x,int y){
     ec2:	af 92       	push	r10
     ec4:	bf 92       	push	r11
     ec6:	cf 92       	push	r12
     ec8:	df 92       	push	r13
     eca:	ef 92       	push	r14
     ecc:	ff 92       	push	r15
     ece:	0f 93       	push	r16
     ed0:	1f 93       	push	r17
     ed2:	cf 93       	push	r28
     ed4:	df 93       	push	r29
     ed6:	5c 01       	movw	r10, r24
     ed8:	e6 2e       	mov	r14, r22
	for (int i=0; i<4;i++){
     eda:	c1 2c       	mov	r12, r1
     edc:	d1 2c       	mov	r13, r1
     ede:	e5 01       	movw	r28, r10
     ee0:	cc 19       	sub	r28, r12
     ee2:	dd 09       	sbc	r29, r13
     ee4:	85 01       	movw	r16, r10
     ee6:	0c 0d       	add	r16, r12
     ee8:	1d 1d       	adc	r17, r13
		for(int s=x-i; s<=x+i; s++)
     eea:	0c 17       	cp	r16, r28
     eec:	1d 07       	cpc	r17, r29
     eee:	4c f0       	brlt	.+18     	; 0xf02 <triangle_left+0x40>
     ef0:	fc 2c       	mov	r15, r12
     ef2:	fe 0c       	add	r15, r14
		GLCD_Dot(s,y+i);
     ef4:	6f 2d       	mov	r22, r15
     ef6:	8c 2f       	mov	r24, r28
     ef8:	bf d1       	rcall	.+894    	; 0x1278 <GLCD_Dot>
	}
}

void triangle_left(int x,int y){
	for (int i=0; i<4;i++){
		for(int s=x-i; s<=x+i; s++)
     efa:	21 96       	adiw	r28, 0x01	; 1
     efc:	0c 17       	cp	r16, r28
     efe:	1d 07       	cpc	r17, r29
     f00:	cc f7       	brge	.-14     	; 0xef4 <triangle_left+0x32>
		GLCD_Dot_Out(s,y-i);
	}
}

void triangle_left(int x,int y){
	for (int i=0; i<4;i++){
     f02:	8f ef       	ldi	r24, 0xFF	; 255
     f04:	c8 1a       	sub	r12, r24
     f06:	d8 0a       	sbc	r13, r24
     f08:	84 e0       	ldi	r24, 0x04	; 4
     f0a:	c8 16       	cp	r12, r24
     f0c:	d1 04       	cpc	r13, r1
     f0e:	39 f7       	brne	.-50     	; 0xede <triangle_left+0x1c>
		for(int s=x-i; s<=x+i; s++)
		GLCD_Dot(s,y+i);
	}
}
     f10:	df 91       	pop	r29
     f12:	cf 91       	pop	r28
     f14:	1f 91       	pop	r17
     f16:	0f 91       	pop	r16
     f18:	ff 90       	pop	r15
     f1a:	ef 90       	pop	r14
     f1c:	df 90       	pop	r13
     f1e:	cf 90       	pop	r12
     f20:	bf 90       	pop	r11
     f22:	af 90       	pop	r10
     f24:	08 95       	ret

00000f26 <home_pic>:

void home_pic(int x, int y){
     f26:	7f 92       	push	r7
     f28:	8f 92       	push	r8
     f2a:	9f 92       	push	r9
     f2c:	af 92       	push	r10
     f2e:	bf 92       	push	r11
     f30:	cf 92       	push	r12
     f32:	df 92       	push	r13
     f34:	ef 92       	push	r14
     f36:	ff 92       	push	r15
     f38:	0f 93       	push	r16
     f3a:	1f 93       	push	r17
     f3c:	cf 93       	push	r28
     f3e:	df 93       	push	r29
     f40:	6b 01       	movw	r12, r22
     f42:	78 2e       	mov	r7, r24
	for (int i=0; i<4;i++){
     f44:	e1 2c       	mov	r14, r1
     f46:	f1 2c       	mov	r15, r1
		for(int s=y-i; s<=y+i; s++)
		GLCD_Dot(x+i,s);
		
		for (int k=y-2;k<y+3;k++)
     f48:	5b 01       	movw	r10, r22
     f4a:	82 e0       	ldi	r24, 0x02	; 2
     f4c:	a8 1a       	sub	r10, r24
     f4e:	b1 08       	sbc	r11, r1
     f50:	8b 01       	movw	r16, r22
     f52:	0d 5f       	subi	r16, 0xFD	; 253
     f54:	1f 4f       	sbci	r17, 0xFF	; 255
     f56:	46 01       	movw	r8, r12
     f58:	8e 18       	sub	r8, r14
     f5a:	9f 08       	sbc	r9, r15
     f5c:	e7 01       	movw	r28, r14
     f5e:	cc 0d       	add	r28, r12
     f60:	dd 1d       	adc	r29, r13
	}
}

void home_pic(int x, int y){
	for (int i=0; i<4;i++){
		for(int s=y-i; s<=y+i; s++)
     f62:	c8 15       	cp	r28, r8
     f64:	d9 05       	cpc	r29, r9
     f66:	4c f0       	brlt	.+18     	; 0xf7a <home_pic+0x54>
		GLCD_Dot(x+i,s);
     f68:	68 2d       	mov	r22, r8
     f6a:	87 2d       	mov	r24, r7
     f6c:	85 d1       	rcall	.+778    	; 0x1278 <GLCD_Dot>
	}
}

void home_pic(int x, int y){
	for (int i=0; i<4;i++){
		for(int s=y-i; s<=y+i; s++)
     f6e:	8f ef       	ldi	r24, 0xFF	; 255
     f70:	88 1a       	sub	r8, r24
     f72:	98 0a       	sbc	r9, r24
     f74:	c8 15       	cp	r28, r8
     f76:	d9 05       	cpc	r29, r9
     f78:	bc f7       	brge	.-18     	; 0xf68 <home_pic+0x42>
		GLCD_Dot(x+i,s);
		
		for (int k=y-2;k<y+3;k++)
     f7a:	e5 01       	movw	r28, r10
     f7c:	a0 16       	cp	r10, r16
     f7e:	b1 06       	cpc	r11, r17
     f80:	64 f4       	brge	.+24     	; 0xf9a <home_pic+0x74>
		GLCD_Dot(x+3+i,k);
     f82:	0f 2e       	mov	r0, r31
     f84:	f3 e0       	ldi	r31, 0x03	; 3
     f86:	9f 2e       	mov	r9, r31
     f88:	f0 2d       	mov	r31, r0
     f8a:	97 0c       	add	r9, r7
     f8c:	6c 2f       	mov	r22, r28
     f8e:	89 2d       	mov	r24, r9
     f90:	73 d1       	rcall	.+742    	; 0x1278 <GLCD_Dot>
void home_pic(int x, int y){
	for (int i=0; i<4;i++){
		for(int s=y-i; s<=y+i; s++)
		GLCD_Dot(x+i,s);
		
		for (int k=y-2;k<y+3;k++)
     f92:	21 96       	adiw	r28, 0x01	; 1
     f94:	c0 17       	cp	r28, r16
     f96:	d1 07       	cpc	r29, r17
     f98:	c9 f7       	brne	.-14     	; 0xf8c <home_pic+0x66>
		GLCD_Dot(s,y+i);
	}
}

void home_pic(int x, int y){
	for (int i=0; i<4;i++){
     f9a:	8f ef       	ldi	r24, 0xFF	; 255
     f9c:	e8 1a       	sub	r14, r24
     f9e:	f8 0a       	sbc	r15, r24
     fa0:	73 94       	inc	r7
     fa2:	84 e0       	ldi	r24, 0x04	; 4
     fa4:	e8 16       	cp	r14, r24
     fa6:	f1 04       	cpc	r15, r1
     fa8:	b1 f6       	brne	.-84     	; 0xf56 <home_pic+0x30>
		
		for (int k=y-2;k<y+3;k++)
		GLCD_Dot(x+3+i,k);
	}
	
}
     faa:	df 91       	pop	r29
     fac:	cf 91       	pop	r28
     fae:	1f 91       	pop	r17
     fb0:	0f 91       	pop	r16
     fb2:	ff 90       	pop	r15
     fb4:	ef 90       	pop	r14
     fb6:	df 90       	pop	r13
     fb8:	cf 90       	pop	r12
     fba:	bf 90       	pop	r11
     fbc:	af 90       	pop	r10
     fbe:	9f 90       	pop	r9
     fc0:	8f 90       	pop	r8
     fc2:	7f 90       	pop	r7
     fc4:	08 95       	ret

00000fc6 <default_lcd_disp>:
	
}

void default_lcd_disp(){
	
	GLCD_Line(0,88,54,88);// vertical line
     fc6:	28 e5       	ldi	r18, 0x58	; 88
     fc8:	46 e3       	ldi	r20, 0x36	; 54
     fca:	68 e5       	ldi	r22, 0x58	; 88
     fcc:	80 e0       	ldi	r24, 0x00	; 0
     fce:	14 d2       	rcall	.+1064   	; 0x13f8 <GLCD_Line>
	GLCD_Line(9,0,9,127);// menu line
     fd0:	2f e7       	ldi	r18, 0x7F	; 127
     fd2:	49 e0       	ldi	r20, 0x09	; 9
     fd4:	60 e0       	ldi	r22, 0x00	; 0
     fd6:	89 e0       	ldi	r24, 0x09	; 9
     fd8:	0f d2       	rcall	.+1054   	; 0x13f8 <GLCD_Line>
	GLCD_Line(54,0,54,127); // bottom line
     fda:	2f e7       	ldi	r18, 0x7F	; 127
     fdc:	46 e3       	ldi	r20, 0x36	; 54
     fde:	60 e0       	ldi	r22, 0x00	; 0
     fe0:	86 e3       	ldi	r24, 0x36	; 54
     fe2:	0a d2       	rcall	.+1044   	; 0x13f8 <GLCD_Line>
	
	
	GLCD_Circle(1,108,1);
     fe4:	41 e0       	ldi	r20, 0x01	; 1
     fe6:	6c e6       	ldi	r22, 0x6C	; 108
     fe8:	81 e0       	ldi	r24, 0x01	; 1
     fea:	8e d2       	rcall	.+1308   	; 0x1508 <GLCD_Circle>
	lcd_string(0,18,"C");
     fec:	47 e0       	ldi	r20, 0x07	; 7
     fee:	53 e0       	ldi	r21, 0x03	; 3
     ff0:	62 e1       	ldi	r22, 0x12	; 18
     ff2:	80 e0       	ldi	r24, 0x00	; 0
     ff4:	15 d1       	rcall	.+554    	; 0x1220 <lcd_string>
	home_pic(0,122);
     ff6:	6a e7       	ldi	r22, 0x7A	; 122
     ff8:	70 e0       	ldi	r23, 0x00	; 0
     ffa:	80 e0       	ldi	r24, 0x00	; 0
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	93 df       	rcall	.-218    	; 0xf26 <home_pic>
	
	//menu
	//1 menu_disp();
	
	//mode
	lcd_string(2,15,"mode:");
    1000:	4b e0       	ldi	r20, 0x0B	; 11
    1002:	53 e0       	ldi	r21, 0x03	; 3
    1004:	6f e0       	ldi	r22, 0x0F	; 15
    1006:	82 e0       	ldi	r24, 0x02	; 2
    1008:	0b d1       	rcall	.+534    	; 0x1220 <lcd_string>
	//target
	// 3set_targetTemp(targetTemp);
	//target
	
	// down menu
	triangle_up(55,5);
    100a:	65 e0       	ldi	r22, 0x05	; 5
    100c:	70 e0       	ldi	r23, 0x00	; 0
    100e:	87 e3       	ldi	r24, 0x37	; 55
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	0b de       	rcall	.-1002   	; 0xc2a <triangle_up>
	triangle_down(63,5);
    1014:	65 e0       	ldi	r22, 0x05	; 5
    1016:	70 e0       	ldi	r23, 0x00	; 0
    1018:	8f e3       	ldi	r24, 0x3F	; 63
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	38 de       	rcall	.-912    	; 0xc8e <triangle_down>
	triangle_left(59,80);
    101e:	60 e5       	ldi	r22, 0x50	; 80
    1020:	70 e0       	ldi	r23, 0x00	; 0
    1022:	8b e3       	ldi	r24, 0x3B	; 59
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	4d df       	rcall	.-358    	; 0xec2 <triangle_left>
	lcd_string(7,1,"select|OK|");
    1028:	41 e1       	ldi	r20, 0x11	; 17
    102a:	53 e0       	ldi	r21, 0x03	; 3
    102c:	61 e0       	ldi	r22, 0x01	; 1
    102e:	87 e0       	ldi	r24, 0x07	; 7
    1030:	f7 d0       	rcall	.+494    	; 0x1220 <lcd_string>
	lcd_string(7,14,"back");
    1032:	4c e1       	ldi	r20, 0x1C	; 28
    1034:	53 e0       	ldi	r21, 0x03	; 3
    1036:	6e e0       	ldi	r22, 0x0E	; 14
    1038:	87 e0       	ldi	r24, 0x07	; 7
    103a:	f2 c0       	rjmp	.+484    	; 0x1220 <lcd_string>
    103c:	08 95       	ret

0000103e <temp_disp2>:
	}
	
}


void temp_disp2(int temp){
    103e:	0f 93       	push	r16
    1040:	1f 93       	push	r17
    1042:	cf 93       	push	r28
    1044:	df 93       	push	r29
    1046:	00 d0       	rcall	.+0      	; 0x1048 <temp_disp2+0xa>
    1048:	1f 92       	push	r1
    104a:	cd b7       	in	r28, 0x3d	; 61
    104c:	de b7       	in	r29, 0x3e	; 62
    104e:	8c 01       	movw	r16, r24
    1050:	4a e0       	ldi	r20, 0x0A	; 10
    1052:	be 01       	movw	r22, r28
    1054:	6f 5f       	subi	r22, 0xFF	; 255
    1056:	7f 4f       	sbci	r23, 0xFF	; 255
    1058:	c6 d4       	rcall	.+2444   	; 0x19e6 <__itoa_ncheck>
	itoa(temp,str,10);
	
	//byte_clear(0,92);
	//byte_clear(0,100);

	if(temp<100){
    105a:	04 36       	cpi	r16, 0x64	; 100
    105c:	11 05       	cpc	r17, r1
    105e:	dc f4       	brge	.+54     	; 0x1096 <temp_disp2+0x58>
		if(temp>=10){
    1060:	0a 30       	cpi	r16, 0x0A	; 10
    1062:	11 05       	cpc	r17, r1
    1064:	64 f0       	brlt	.+24     	; 0x107e <temp_disp2+0x40>
		lcd_string(5,0,str);
    1066:	ae 01       	movw	r20, r28
    1068:	4f 5f       	subi	r20, 0xFF	; 255
    106a:	5f 4f       	sbci	r21, 0xFF	; 255
    106c:	60 e0       	ldi	r22, 0x00	; 0
    106e:	85 e0       	ldi	r24, 0x05	; 5
    1070:	d7 d0       	rcall	.+430    	; 0x1220 <lcd_string>
		lcd_string(5,2,"'C out");
    1072:	41 e2       	ldi	r20, 0x21	; 33
    1074:	53 e0       	ldi	r21, 0x03	; 3
    1076:	62 e0       	ldi	r22, 0x02	; 2
    1078:	85 e0       	ldi	r24, 0x05	; 5
    107a:	d2 d0       	rcall	.+420    	; 0x1220 <lcd_string>
    107c:	11 c0       	rjmp	.+34     	; 0x10a0 <temp_disp2+0x62>
		}
		else{
		lcd_string(5,1,str);
    107e:	ae 01       	movw	r20, r28
    1080:	4f 5f       	subi	r20, 0xFF	; 255
    1082:	5f 4f       	sbci	r21, 0xFF	; 255
    1084:	61 e0       	ldi	r22, 0x01	; 1
    1086:	85 e0       	ldi	r24, 0x05	; 5
    1088:	cb d0       	rcall	.+406    	; 0x1220 <lcd_string>
		lcd_string(5,2,"'C out");}
    108a:	41 e2       	ldi	r20, 0x21	; 33
    108c:	53 e0       	ldi	r21, 0x03	; 3
    108e:	62 e0       	ldi	r22, 0x02	; 2
    1090:	85 e0       	ldi	r24, 0x05	; 5
    1092:	c6 d0       	rcall	.+396    	; 0x1220 <lcd_string>
    1094:	05 c0       	rjmp	.+10     	; 0x10a0 <temp_disp2+0x62>
	}
	else lcd_string(5,0,"X");
    1096:	49 e0       	ldi	r20, 0x09	; 9
    1098:	53 e0       	ldi	r21, 0x03	; 3
    109a:	60 e0       	ldi	r22, 0x00	; 0
    109c:	85 e0       	ldi	r24, 0x05	; 5
    109e:	c0 d0       	rcall	.+384    	; 0x1220 <lcd_string>
	
}
    10a0:	0f 90       	pop	r0
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	df 91       	pop	r29
    10a8:	cf 91       	pop	r28
    10aa:	1f 91       	pop	r17
    10ac:	0f 91       	pop	r16
    10ae:	08 95       	ret

000010b0 <cmndl>:
		for(x = x1; x <= x2; x++) {
			for(y = y1; y <= y2; y++) {
				GLCD_Dot(x,y);
			}
		}
	}
    10b0:	1d 9a       	sbi	0x03, 5	; 3
    10b2:	91 e3       	ldi	r25, 0x31	; 49
    10b4:	9a 95       	dec	r25
    10b6:	f1 f7       	brne	.-4      	; 0x10b4 <cmndl+0x4>
    10b8:	00 00       	nop
    10ba:	1c 98       	cbi	0x03, 4	; 3
    10bc:	1e 98       	cbi	0x03, 6	; 3
    10be:	1f 9a       	sbi	0x03, 7	; 3
    10c0:	8b bb       	out	0x1b, r24	; 27
    10c2:	81 e3       	ldi	r24, 0x31	; 49
    10c4:	8a 95       	dec	r24
    10c6:	f1 f7       	brne	.-4      	; 0x10c4 <cmndl+0x14>
    10c8:	00 00       	nop
    10ca:	1d 98       	cbi	0x03, 5	; 3
    10cc:	08 95       	ret

000010ce <cmndr>:
    10ce:	1d 9a       	sbi	0x03, 5	; 3
    10d0:	91 e3       	ldi	r25, 0x31	; 49
    10d2:	9a 95       	dec	r25
    10d4:	f1 f7       	brne	.-4      	; 0x10d2 <cmndr+0x4>
    10d6:	00 00       	nop
    10d8:	1c 98       	cbi	0x03, 4	; 3
    10da:	1e 9a       	sbi	0x03, 6	; 3
    10dc:	1f 98       	cbi	0x03, 7	; 3
    10de:	8b bb       	out	0x1b, r24	; 27
    10e0:	81 e3       	ldi	r24, 0x31	; 49
    10e2:	8a 95       	dec	r24
    10e4:	f1 f7       	brne	.-4      	; 0x10e2 <cmndr+0x14>
    10e6:	00 00       	nop
    10e8:	1d 98       	cbi	0x03, 5	; 3
    10ea:	08 95       	ret

000010ec <cmnda>:
    10ec:	1d 9a       	sbi	0x03, 5	; 3
    10ee:	91 e3       	ldi	r25, 0x31	; 49
    10f0:	9a 95       	dec	r25
    10f2:	f1 f7       	brne	.-4      	; 0x10f0 <cmnda+0x4>
    10f4:	00 00       	nop
    10f6:	1c 98       	cbi	0x03, 4	; 3
    10f8:	1e 9a       	sbi	0x03, 6	; 3
    10fa:	1f 9a       	sbi	0x03, 7	; 3
    10fc:	8b bb       	out	0x1b, r24	; 27
    10fe:	81 e3       	ldi	r24, 0x31	; 49
    1100:	8a 95       	dec	r24
    1102:	f1 f7       	brne	.-4      	; 0x1100 <__stack+0x1>
    1104:	00 00       	nop
    1106:	1d 98       	cbi	0x03, 5	; 3
    1108:	08 95       	ret

0000110a <datal>:
    110a:	1d 9a       	sbi	0x03, 5	; 3
    110c:	91 e3       	ldi	r25, 0x31	; 49
    110e:	9a 95       	dec	r25
    1110:	f1 f7       	brne	.-4      	; 0x110e <datal+0x4>
    1112:	00 00       	nop
    1114:	1c 9a       	sbi	0x03, 4	; 3
    1116:	1e 98       	cbi	0x03, 6	; 3
    1118:	1f 9a       	sbi	0x03, 7	; 3
    111a:	8b bb       	out	0x1b, r24	; 27
    111c:	81 e3       	ldi	r24, 0x31	; 49
    111e:	8a 95       	dec	r24
    1120:	f1 f7       	brne	.-4      	; 0x111e <datal+0x14>
    1122:	00 00       	nop
    1124:	1d 98       	cbi	0x03, 5	; 3
    1126:	08 95       	ret

00001128 <datar>:
    1128:	1d 9a       	sbi	0x03, 5	; 3
    112a:	91 e3       	ldi	r25, 0x31	; 49
    112c:	9a 95       	dec	r25
    112e:	f1 f7       	brne	.-4      	; 0x112c <datar+0x4>
    1130:	00 00       	nop
    1132:	1c 9a       	sbi	0x03, 4	; 3
    1134:	1e 9a       	sbi	0x03, 6	; 3
    1136:	1f 98       	cbi	0x03, 7	; 3
    1138:	8b bb       	out	0x1b, r24	; 27
    113a:	81 e3       	ldi	r24, 0x31	; 49
    113c:	8a 95       	dec	r24
    113e:	f1 f7       	brne	.-4      	; 0x113c <datar+0x14>
    1140:	00 00       	nop
    1142:	1d 98       	cbi	0x03, 5	; 3
    1144:	08 95       	ret

00001146 <dataa>:
    1146:	1d 9a       	sbi	0x03, 5	; 3
    1148:	91 e3       	ldi	r25, 0x31	; 49
    114a:	9a 95       	dec	r25
    114c:	f1 f7       	brne	.-4      	; 0x114a <dataa+0x4>
    114e:	00 00       	nop
    1150:	1c 9a       	sbi	0x03, 4	; 3
    1152:	1e 9a       	sbi	0x03, 6	; 3
    1154:	1f 9a       	sbi	0x03, 7	; 3
    1156:	8b bb       	out	0x1b, r24	; 27
    1158:	81 e3       	ldi	r24, 0x31	; 49
    115a:	8a 95       	dec	r24
    115c:	f1 f7       	brne	.-4      	; 0x115a <dataa+0x14>
    115e:	00 00       	nop
    1160:	1d 98       	cbi	0x03, 5	; 3
    1162:	08 95       	ret

00001164 <lcd_clear>:
    1164:	cf 93       	push	r28
    1166:	df 93       	push	r29
    1168:	d8 eb       	ldi	r29, 0xB8	; 184
    116a:	8d 2f       	mov	r24, r29
    116c:	bf df       	rcall	.-130    	; 0x10ec <cmnda>
    116e:	80 e4       	ldi	r24, 0x40	; 64
    1170:	bd df       	rcall	.-134    	; 0x10ec <cmnda>
    1172:	c0 e4       	ldi	r28, 0x40	; 64
    1174:	80 e0       	ldi	r24, 0x00	; 0
    1176:	e7 df       	rcall	.-50     	; 0x1146 <dataa>
    1178:	c1 50       	subi	r28, 0x01	; 1
    117a:	e1 f7       	brne	.-8      	; 0x1174 <lcd_clear+0x10>
    117c:	df 5f       	subi	r29, 0xFF	; 255
    117e:	d0 3c       	cpi	r29, 0xC0	; 192
    1180:	a1 f7       	brne	.-24     	; 0x116a <lcd_clear+0x6>
    1182:	df 91       	pop	r29
    1184:	cf 91       	pop	r28
    1186:	08 95       	ret

00001188 <lcd_init>:
    1188:	8f e3       	ldi	r24, 0x3F	; 63
    118a:	b0 df       	rcall	.-160    	; 0x10ec <cmnda>
    118c:	80 ec       	ldi	r24, 0xC0	; 192
    118e:	ae df       	rcall	.-164    	; 0x10ec <cmnda>
    1190:	88 eb       	ldi	r24, 0xB8	; 184
    1192:	ac df       	rcall	.-168    	; 0x10ec <cmnda>
    1194:	80 e4       	ldi	r24, 0x40	; 64
    1196:	aa cf       	rjmp	.-172    	; 0x10ec <cmnda>
    1198:	08 95       	ret

0000119a <lcd_xy>:
    119a:	80 93 ad 03 	sts	0x03AD, r24	; 0x8003ad <xchar>
    119e:	60 93 b0 07 	sts	0x07B0, r22	; 0x8007b0 <ychar>
    11a2:	88 54       	subi	r24, 0x48	; 72
    11a4:	a3 df       	rcall	.-186    	; 0x10ec <cmnda>
    11a6:	80 91 b0 07 	lds	r24, 0x07B0	; 0x8007b0 <ychar>
    11aa:	8a 30       	cpi	r24, 0x0A	; 10
    11ac:	38 f4       	brcc	.+14     	; 0x11bc <lcd_xy+0x22>
    11ae:	98 2f       	mov	r25, r24
    11b0:	99 0f       	add	r25, r25
    11b2:	89 0f       	add	r24, r25
    11b4:	88 0f       	add	r24, r24
    11b6:	8c 5b       	subi	r24, 0xBC	; 188
    11b8:	7b cf       	rjmp	.-266    	; 0x10b0 <cmndl>
    11ba:	08 95       	ret
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	0a 97       	sbiw	r24, 0x0a	; 10
    11c0:	98 2f       	mov	r25, r24
    11c2:	99 0f       	add	r25, r25
    11c4:	89 0f       	add	r24, r25
    11c6:	88 0f       	add	r24, r24
    11c8:	80 5c       	subi	r24, 0xC0	; 192
    11ca:	81 cf       	rjmp	.-254    	; 0x10ce <cmndr>
    11cc:	08 95       	ret

000011ce <lcd_char>:
    11ce:	1f 93       	push	r17
    11d0:	cf 93       	push	r28
    11d2:	df 93       	push	r29
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	ec 01       	movw	r28, r24
    11d8:	cc 0f       	add	r28, r28
    11da:	dd 1f       	adc	r29, r29
    11dc:	cc 0f       	add	r28, r28
    11de:	dd 1f       	adc	r29, r29
    11e0:	8c 0f       	add	r24, r28
    11e2:	9d 1f       	adc	r25, r29
    11e4:	ec 01       	movw	r28, r24
    11e6:	c4 57       	subi	r28, 0x74	; 116
    11e8:	df 4f       	sbci	r29, 0xFF	; 255
    11ea:	15 e0       	ldi	r17, 0x05	; 5
    11ec:	80 91 b0 07 	lds	r24, 0x07B0	; 0x8007b0 <ychar>
    11f0:	8a 30       	cpi	r24, 0x0A	; 10
    11f2:	18 f4       	brcc	.+6      	; 0x11fa <lcd_char+0x2c>
    11f4:	88 81       	ld	r24, Y
    11f6:	89 df       	rcall	.-238    	; 0x110a <datal>
    11f8:	02 c0       	rjmp	.+4      	; 0x11fe <lcd_char+0x30>
    11fa:	88 81       	ld	r24, Y
    11fc:	95 df       	rcall	.-214    	; 0x1128 <datar>
    11fe:	11 50       	subi	r17, 0x01	; 1
    1200:	21 96       	adiw	r28, 0x01	; 1
    1202:	11 11       	cpse	r17, r1
    1204:	f3 cf       	rjmp	.-26     	; 0x11ec <lcd_char+0x1e>
    1206:	80 91 b0 07 	lds	r24, 0x07B0	; 0x8007b0 <ychar>
    120a:	8a 30       	cpi	r24, 0x0A	; 10
    120c:	18 f4       	brcc	.+6      	; 0x1214 <lcd_char+0x46>
    120e:	80 e0       	ldi	r24, 0x00	; 0
    1210:	7c df       	rcall	.-264    	; 0x110a <datal>
    1212:	02 c0       	rjmp	.+4      	; 0x1218 <lcd_char+0x4a>
    1214:	80 e0       	ldi	r24, 0x00	; 0
    1216:	88 df       	rcall	.-240    	; 0x1128 <datar>
    1218:	df 91       	pop	r29
    121a:	cf 91       	pop	r28
    121c:	1f 91       	pop	r17
    121e:	08 95       	ret

00001220 <lcd_string>:
    1220:	cf 93       	push	r28
    1222:	df 93       	push	r29
    1224:	ea 01       	movw	r28, r20
    1226:	80 93 ad 03 	sts	0x03AD, r24	; 0x8003ad <xchar>
    122a:	60 93 b0 07 	sts	0x07B0, r22	; 0x8007b0 <ychar>
    122e:	b5 df       	rcall	.-150    	; 0x119a <lcd_xy>
    1230:	88 81       	ld	r24, Y
    1232:	88 23       	and	r24, r24
    1234:	81 f0       	breq	.+32     	; 0x1256 <lcd_string+0x36>
    1236:	80 91 b0 07 	lds	r24, 0x07B0	; 0x8007b0 <ychar>
    123a:	8a 30       	cpi	r24, 0x0A	; 10
    123c:	11 f4       	brne	.+4      	; 0x1242 <lcd_string+0x22>
    123e:	80 e4       	ldi	r24, 0x40	; 64
    1240:	46 df       	rcall	.-372    	; 0x10ce <cmndr>
    1242:	89 91       	ld	r24, Y+
    1244:	c4 df       	rcall	.-120    	; 0x11ce <lcd_char>
    1246:	80 91 b0 07 	lds	r24, 0x07B0	; 0x8007b0 <ychar>
    124a:	8f 5f       	subi	r24, 0xFF	; 255
    124c:	80 93 b0 07 	sts	0x07B0, r24	; 0x8007b0 <ychar>
    1250:	88 81       	ld	r24, Y
    1252:	81 11       	cpse	r24, r1
    1254:	f0 cf       	rjmp	.-32     	; 0x1236 <lcd_string+0x16>
    1256:	df 91       	pop	r29
    1258:	cf 91       	pop	r28
    125a:	08 95       	ret

0000125c <GLCD_Axis_xy>:
    125c:	cf 93       	push	r28
    125e:	c6 2f       	mov	r28, r22
    1260:	88 54       	subi	r24, 0x48	; 72
    1262:	44 df       	rcall	.-376    	; 0x10ec <cmnda>
    1264:	c0 34       	cpi	r28, 0x40	; 64
    1266:	20 f4       	brcc	.+8      	; 0x1270 <GLCD_Axis_xy+0x14>
    1268:	80 e4       	ldi	r24, 0x40	; 64
    126a:	8c 0f       	add	r24, r28
    126c:	21 df       	rcall	.-446    	; 0x10b0 <cmndl>
    126e:	02 c0       	rjmp	.+4      	; 0x1274 <GLCD_Axis_xy+0x18>
    1270:	8c 2f       	mov	r24, r28
    1272:	2d df       	rcall	.-422    	; 0x10ce <cmndr>
    1274:	cf 91       	pop	r28
    1276:	08 95       	ret

00001278 <GLCD_Dot>:
    1278:	ef 92       	push	r14
    127a:	ff 92       	push	r15
    127c:	0f 93       	push	r16
    127e:	1f 93       	push	r17
    1280:	cf 93       	push	r28
    1282:	80 34       	cpi	r24, 0x40	; 64
    1284:	08 f0       	brcs	.+2      	; 0x1288 <GLCD_Dot+0x10>
    1286:	52 c0       	rjmp	.+164    	; 0x132c <GLCD_Dot+0xb4>
    1288:	66 23       	and	r22, r22
    128a:	0c f4       	brge	.+2      	; 0x128e <GLCD_Dot+0x16>
    128c:	4f c0       	rjmp	.+158    	; 0x132c <GLCD_Dot+0xb4>
    128e:	28 2f       	mov	r18, r24
    1290:	26 95       	lsr	r18
    1292:	26 95       	lsr	r18
    1294:	26 95       	lsr	r18
    1296:	98 2f       	mov	r25, r24
    1298:	97 70       	andi	r25, 0x07	; 7
    129a:	71 f0       	breq	.+28     	; 0x12b8 <GLCD_Dot+0x40>
    129c:	91 30       	cpi	r25, 0x01	; 1
    129e:	71 f0       	breq	.+28     	; 0x12bc <GLCD_Dot+0x44>
    12a0:	92 30       	cpi	r25, 0x02	; 2
    12a2:	71 f0       	breq	.+28     	; 0x12c0 <GLCD_Dot+0x48>
    12a4:	93 30       	cpi	r25, 0x03	; 3
    12a6:	71 f0       	breq	.+28     	; 0x12c4 <GLCD_Dot+0x4c>
    12a8:	94 30       	cpi	r25, 0x04	; 4
    12aa:	71 f0       	breq	.+28     	; 0x12c8 <GLCD_Dot+0x50>
    12ac:	95 30       	cpi	r25, 0x05	; 5
    12ae:	71 f0       	breq	.+28     	; 0x12cc <GLCD_Dot+0x54>
    12b0:	96 30       	cpi	r25, 0x06	; 6
    12b2:	71 f0       	breq	.+28     	; 0x12d0 <GLCD_Dot+0x58>
    12b4:	90 e8       	ldi	r25, 0x80	; 128
    12b6:	0d c0       	rjmp	.+26     	; 0x12d2 <GLCD_Dot+0x5a>
    12b8:	91 e0       	ldi	r25, 0x01	; 1
    12ba:	0b c0       	rjmp	.+22     	; 0x12d2 <GLCD_Dot+0x5a>
    12bc:	92 e0       	ldi	r25, 0x02	; 2
    12be:	09 c0       	rjmp	.+18     	; 0x12d2 <GLCD_Dot+0x5a>
    12c0:	94 e0       	ldi	r25, 0x04	; 4
    12c2:	07 c0       	rjmp	.+14     	; 0x12d2 <GLCD_Dot+0x5a>
    12c4:	98 e0       	ldi	r25, 0x08	; 8
    12c6:	05 c0       	rjmp	.+10     	; 0x12d2 <GLCD_Dot+0x5a>
    12c8:	90 e1       	ldi	r25, 0x10	; 16
    12ca:	03 c0       	rjmp	.+6      	; 0x12d2 <GLCD_Dot+0x5a>
    12cc:	90 e2       	ldi	r25, 0x20	; 32
    12ce:	01 c0       	rjmp	.+2      	; 0x12d2 <GLCD_Dot+0x5a>
    12d0:	90 e4       	ldi	r25, 0x40	; 64
    12d2:	c6 2f       	mov	r28, r22
    12d4:	e6 2e       	mov	r14, r22
    12d6:	f1 2c       	mov	r15, r1
    12d8:	02 2f       	mov	r16, r18
    12da:	10 e0       	ldi	r17, 0x00	; 0
    12dc:	f7 01       	movw	r30, r14
    12de:	80 e8       	ldi	r24, 0x80	; 128
    12e0:	28 9f       	mul	r18, r24
    12e2:	e0 0d       	add	r30, r0
    12e4:	f1 1d       	adc	r31, r1
    12e6:	11 24       	eor	r1, r1
    12e8:	e0 55       	subi	r30, 0x50	; 80
    12ea:	fc 4f       	sbci	r31, 0xFC	; 252
    12ec:	80 81       	ld	r24, Z
    12ee:	89 2b       	or	r24, r25
    12f0:	80 83       	st	Z, r24
    12f2:	82 2f       	mov	r24, r18
    12f4:	b3 df       	rcall	.-154    	; 0x125c <GLCD_Axis_xy>
    12f6:	c0 34       	cpi	r28, 0x40	; 64
    12f8:	68 f4       	brcc	.+26     	; 0x1314 <GLCD_Dot+0x9c>
    12fa:	f8 01       	movw	r30, r16
    12fc:	f6 95       	lsr	r31
    12fe:	fe 2f       	mov	r31, r30
    1300:	ee 27       	eor	r30, r30
    1302:	f7 95       	ror	r31
    1304:	e7 95       	ror	r30
    1306:	ee 0d       	add	r30, r14
    1308:	ff 1d       	adc	r31, r15
    130a:	e0 55       	subi	r30, 0x50	; 80
    130c:	fc 4f       	sbci	r31, 0xFC	; 252
    130e:	80 81       	ld	r24, Z
    1310:	fc de       	rcall	.-520    	; 0x110a <datal>
    1312:	0c c0       	rjmp	.+24     	; 0x132c <GLCD_Dot+0xb4>
    1314:	f8 01       	movw	r30, r16
    1316:	f6 95       	lsr	r31
    1318:	fe 2f       	mov	r31, r30
    131a:	ee 27       	eor	r30, r30
    131c:	f7 95       	ror	r31
    131e:	e7 95       	ror	r30
    1320:	ee 0d       	add	r30, r14
    1322:	ff 1d       	adc	r31, r15
    1324:	e0 55       	subi	r30, 0x50	; 80
    1326:	fc 4f       	sbci	r31, 0xFC	; 252
    1328:	80 81       	ld	r24, Z
    132a:	fe de       	rcall	.-516    	; 0x1128 <datar>
    132c:	cf 91       	pop	r28
    132e:	1f 91       	pop	r17
    1330:	0f 91       	pop	r16
    1332:	ff 90       	pop	r15
    1334:	ef 90       	pop	r14
    1336:	08 95       	ret

00001338 <GLCD_Dot_Out>:
    1338:	ef 92       	push	r14
    133a:	ff 92       	push	r15
    133c:	0f 93       	push	r16
    133e:	1f 93       	push	r17
    1340:	cf 93       	push	r28
    1342:	80 34       	cpi	r24, 0x40	; 64
    1344:	08 f0       	brcs	.+2      	; 0x1348 <GLCD_Dot_Out+0x10>
    1346:	52 c0       	rjmp	.+164    	; 0x13ec <GLCD_Dot_Out+0xb4>
    1348:	66 23       	and	r22, r22
    134a:	0c f4       	brge	.+2      	; 0x134e <GLCD_Dot_Out+0x16>
    134c:	4f c0       	rjmp	.+158    	; 0x13ec <GLCD_Dot_Out+0xb4>
    134e:	28 2f       	mov	r18, r24
    1350:	26 95       	lsr	r18
    1352:	26 95       	lsr	r18
    1354:	26 95       	lsr	r18
    1356:	98 2f       	mov	r25, r24
    1358:	97 70       	andi	r25, 0x07	; 7
    135a:	71 f0       	breq	.+28     	; 0x1378 <GLCD_Dot_Out+0x40>
    135c:	91 30       	cpi	r25, 0x01	; 1
    135e:	71 f0       	breq	.+28     	; 0x137c <GLCD_Dot_Out+0x44>
    1360:	92 30       	cpi	r25, 0x02	; 2
    1362:	71 f0       	breq	.+28     	; 0x1380 <GLCD_Dot_Out+0x48>
    1364:	93 30       	cpi	r25, 0x03	; 3
    1366:	71 f0       	breq	.+28     	; 0x1384 <GLCD_Dot_Out+0x4c>
    1368:	94 30       	cpi	r25, 0x04	; 4
    136a:	71 f0       	breq	.+28     	; 0x1388 <GLCD_Dot_Out+0x50>
    136c:	95 30       	cpi	r25, 0x05	; 5
    136e:	71 f0       	breq	.+28     	; 0x138c <GLCD_Dot_Out+0x54>
    1370:	96 30       	cpi	r25, 0x06	; 6
    1372:	71 f0       	breq	.+28     	; 0x1390 <GLCD_Dot_Out+0x58>
    1374:	9f e7       	ldi	r25, 0x7F	; 127
    1376:	0d c0       	rjmp	.+26     	; 0x1392 <GLCD_Dot_Out+0x5a>
    1378:	9e ef       	ldi	r25, 0xFE	; 254
    137a:	0b c0       	rjmp	.+22     	; 0x1392 <GLCD_Dot_Out+0x5a>
    137c:	9d ef       	ldi	r25, 0xFD	; 253
    137e:	09 c0       	rjmp	.+18     	; 0x1392 <GLCD_Dot_Out+0x5a>
    1380:	9b ef       	ldi	r25, 0xFB	; 251
    1382:	07 c0       	rjmp	.+14     	; 0x1392 <GLCD_Dot_Out+0x5a>
    1384:	97 ef       	ldi	r25, 0xF7	; 247
    1386:	05 c0       	rjmp	.+10     	; 0x1392 <GLCD_Dot_Out+0x5a>
    1388:	9f ee       	ldi	r25, 0xEF	; 239
    138a:	03 c0       	rjmp	.+6      	; 0x1392 <GLCD_Dot_Out+0x5a>
    138c:	9f ed       	ldi	r25, 0xDF	; 223
    138e:	01 c0       	rjmp	.+2      	; 0x1392 <GLCD_Dot_Out+0x5a>
    1390:	9f eb       	ldi	r25, 0xBF	; 191
    1392:	c6 2f       	mov	r28, r22
    1394:	e6 2e       	mov	r14, r22
    1396:	f1 2c       	mov	r15, r1
    1398:	02 2f       	mov	r16, r18
    139a:	10 e0       	ldi	r17, 0x00	; 0
    139c:	f7 01       	movw	r30, r14
    139e:	80 e8       	ldi	r24, 0x80	; 128
    13a0:	28 9f       	mul	r18, r24
    13a2:	e0 0d       	add	r30, r0
    13a4:	f1 1d       	adc	r31, r1
    13a6:	11 24       	eor	r1, r1
    13a8:	e0 55       	subi	r30, 0x50	; 80
    13aa:	fc 4f       	sbci	r31, 0xFC	; 252
    13ac:	80 81       	ld	r24, Z
    13ae:	89 23       	and	r24, r25
    13b0:	80 83       	st	Z, r24
    13b2:	82 2f       	mov	r24, r18
    13b4:	53 df       	rcall	.-346    	; 0x125c <GLCD_Axis_xy>
    13b6:	c0 34       	cpi	r28, 0x40	; 64
    13b8:	68 f4       	brcc	.+26     	; 0x13d4 <GLCD_Dot_Out+0x9c>
    13ba:	f8 01       	movw	r30, r16
    13bc:	f6 95       	lsr	r31
    13be:	fe 2f       	mov	r31, r30
    13c0:	ee 27       	eor	r30, r30
    13c2:	f7 95       	ror	r31
    13c4:	e7 95       	ror	r30
    13c6:	ee 0d       	add	r30, r14
    13c8:	ff 1d       	adc	r31, r15
    13ca:	e0 55       	subi	r30, 0x50	; 80
    13cc:	fc 4f       	sbci	r31, 0xFC	; 252
    13ce:	80 81       	ld	r24, Z
    13d0:	9c de       	rcall	.-712    	; 0x110a <datal>
    13d2:	0c c0       	rjmp	.+24     	; 0x13ec <GLCD_Dot_Out+0xb4>
    13d4:	f8 01       	movw	r30, r16
    13d6:	f6 95       	lsr	r31
    13d8:	fe 2f       	mov	r31, r30
    13da:	ee 27       	eor	r30, r30
    13dc:	f7 95       	ror	r31
    13de:	e7 95       	ror	r30
    13e0:	ee 0d       	add	r30, r14
    13e2:	ff 1d       	adc	r31, r15
    13e4:	e0 55       	subi	r30, 0x50	; 80
    13e6:	fc 4f       	sbci	r31, 0xFC	; 252
    13e8:	80 81       	ld	r24, Z
    13ea:	9e de       	rcall	.-708    	; 0x1128 <datar>
    13ec:	cf 91       	pop	r28
    13ee:	1f 91       	pop	r17
    13f0:	0f 91       	pop	r16
    13f2:	ff 90       	pop	r15
    13f4:	ef 90       	pop	r14
    13f6:	08 95       	ret

000013f8 <GLCD_Line>:
    13f8:	8f 92       	push	r8
    13fa:	9f 92       	push	r9
    13fc:	af 92       	push	r10
    13fe:	bf 92       	push	r11
    1400:	cf 92       	push	r12
    1402:	df 92       	push	r13
    1404:	ef 92       	push	r14
    1406:	ff 92       	push	r15
    1408:	0f 93       	push	r16
    140a:	1f 93       	push	r17
    140c:	cf 93       	push	r28
    140e:	df 93       	push	r29
    1410:	62 17       	cp	r22, r18
    1412:	09 f4       	brne	.+2      	; 0x1416 <GLCD_Line+0x1e>
    1414:	47 c0       	rjmp	.+142    	; 0x14a4 <GLCD_Line+0xac>
    1416:	62 17       	cp	r22, r18
    1418:	18 f5       	brcc	.+70     	; 0x1460 <GLCD_Line+0x68>
    141a:	70 e0       	ldi	r23, 0x00	; 0
    141c:	02 2f       	mov	r16, r18
    141e:	10 e0       	ldi	r17, 0x00	; 0
    1420:	06 17       	cp	r16, r22
    1422:	17 07       	cpc	r17, r23
    1424:	0c f4       	brge	.+2      	; 0x1428 <GLCD_Line+0x30>
    1426:	63 c0       	rjmp	.+198    	; 0x14ee <GLCD_Line+0xf6>
    1428:	c8 2f       	mov	r28, r24
    142a:	d0 e0       	ldi	r29, 0x00	; 0
    142c:	c4 2e       	mov	r12, r20
    142e:	d1 2c       	mov	r13, r1
    1430:	cc 1a       	sub	r12, r28
    1432:	dd 0a       	sbc	r13, r29
    1434:	4b 01       	movw	r8, r22
    1436:	e1 2c       	mov	r14, r1
    1438:	f1 2c       	mov	r15, r1
    143a:	58 01       	movw	r10, r16
    143c:	a6 1a       	sub	r10, r22
    143e:	b7 0a       	sbc	r11, r23
    1440:	c7 01       	movw	r24, r14
    1442:	b5 01       	movw	r22, r10
    1444:	a9 d2       	rcall	.+1362   	; 0x1998 <__divmodhi4>
    1446:	86 2f       	mov	r24, r22
    1448:	68 2d       	mov	r22, r8
    144a:	8c 0f       	add	r24, r28
    144c:	15 df       	rcall	.-470    	; 0x1278 <GLCD_Dot>
    144e:	8f ef       	ldi	r24, 0xFF	; 255
    1450:	88 1a       	sub	r8, r24
    1452:	98 0a       	sbc	r9, r24
    1454:	ec 0c       	add	r14, r12
    1456:	fd 1c       	adc	r15, r13
    1458:	08 15       	cp	r16, r8
    145a:	19 05       	cpc	r17, r9
    145c:	8c f7       	brge	.-30     	; 0x1440 <GLCD_Line+0x48>
    145e:	47 c0       	rjmp	.+142    	; 0x14ee <GLCD_Line+0xf6>
    1460:	70 e0       	ldi	r23, 0x00	; 0
    1462:	02 2f       	mov	r16, r18
    1464:	10 e0       	ldi	r17, 0x00	; 0
    1466:	60 17       	cp	r22, r16
    1468:	71 07       	cpc	r23, r17
    146a:	0c f4       	brge	.+2      	; 0x146e <GLCD_Line+0x76>
    146c:	40 c0       	rjmp	.+128    	; 0x14ee <GLCD_Line+0xf6>
    146e:	c8 2f       	mov	r28, r24
    1470:	d0 e0       	ldi	r29, 0x00	; 0
    1472:	5e 01       	movw	r10, r28
    1474:	a4 1a       	sub	r10, r20
    1476:	b1 08       	sbc	r11, r1
    1478:	4b 01       	movw	r8, r22
    147a:	e1 2c       	mov	r14, r1
    147c:	f1 2c       	mov	r15, r1
    147e:	68 01       	movw	r12, r16
    1480:	c6 1a       	sub	r12, r22
    1482:	d7 0a       	sbc	r13, r23
    1484:	c7 01       	movw	r24, r14
    1486:	b6 01       	movw	r22, r12
    1488:	87 d2       	rcall	.+1294   	; 0x1998 <__divmodhi4>
    148a:	86 2f       	mov	r24, r22
    148c:	68 2d       	mov	r22, r8
    148e:	8c 0f       	add	r24, r28
    1490:	f3 de       	rcall	.-538    	; 0x1278 <GLCD_Dot>
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	88 1a       	sub	r8, r24
    1496:	91 08       	sbc	r9, r1
    1498:	ea 0c       	add	r14, r10
    149a:	fb 1c       	adc	r15, r11
    149c:	80 16       	cp	r8, r16
    149e:	91 06       	cpc	r9, r17
    14a0:	8c f7       	brge	.-30     	; 0x1484 <GLCD_Line+0x8c>
    14a2:	25 c0       	rjmp	.+74     	; 0x14ee <GLCD_Line+0xf6>
    14a4:	84 17       	cp	r24, r20
    14a6:	11 f1       	breq	.+68     	; 0x14ec <GLCD_Line+0xf4>
    14a8:	84 17       	cp	r24, r20
    14aa:	80 f4       	brcc	.+32     	; 0x14cc <GLCD_Line+0xd4>
    14ac:	c8 2f       	mov	r28, r24
    14ae:	d0 e0       	ldi	r29, 0x00	; 0
    14b0:	e4 2e       	mov	r14, r20
    14b2:	f1 2c       	mov	r15, r1
    14b4:	ec 16       	cp	r14, r28
    14b6:	fd 06       	cpc	r15, r29
    14b8:	d4 f0       	brlt	.+52     	; 0x14ee <GLCD_Line+0xf6>
    14ba:	16 2f       	mov	r17, r22
    14bc:	61 2f       	mov	r22, r17
    14be:	8c 2f       	mov	r24, r28
    14c0:	db de       	rcall	.-586    	; 0x1278 <GLCD_Dot>
    14c2:	21 96       	adiw	r28, 0x01	; 1
    14c4:	ec 16       	cp	r14, r28
    14c6:	fd 06       	cpc	r15, r29
    14c8:	cc f7       	brge	.-14     	; 0x14bc <GLCD_Line+0xc4>
    14ca:	11 c0       	rjmp	.+34     	; 0x14ee <GLCD_Line+0xf6>
    14cc:	c8 2f       	mov	r28, r24
    14ce:	d0 e0       	ldi	r29, 0x00	; 0
    14d0:	e4 2e       	mov	r14, r20
    14d2:	f1 2c       	mov	r15, r1
    14d4:	ce 15       	cp	r28, r14
    14d6:	df 05       	cpc	r29, r15
    14d8:	54 f0       	brlt	.+20     	; 0x14ee <GLCD_Line+0xf6>
    14da:	16 2f       	mov	r17, r22
    14dc:	61 2f       	mov	r22, r17
    14de:	8c 2f       	mov	r24, r28
    14e0:	cb de       	rcall	.-618    	; 0x1278 <GLCD_Dot>
    14e2:	21 97       	sbiw	r28, 0x01	; 1
    14e4:	ce 15       	cp	r28, r14
    14e6:	df 05       	cpc	r29, r15
    14e8:	cc f7       	brge	.-14     	; 0x14dc <GLCD_Line+0xe4>
    14ea:	01 c0       	rjmp	.+2      	; 0x14ee <GLCD_Line+0xf6>
    14ec:	c5 de       	rcall	.-630    	; 0x1278 <GLCD_Dot>
    14ee:	df 91       	pop	r29
    14f0:	cf 91       	pop	r28
    14f2:	1f 91       	pop	r17
    14f4:	0f 91       	pop	r16
    14f6:	ff 90       	pop	r15
    14f8:	ef 90       	pop	r14
    14fa:	df 90       	pop	r13
    14fc:	cf 90       	pop	r12
    14fe:	bf 90       	pop	r11
    1500:	af 90       	pop	r10
    1502:	9f 90       	pop	r9
    1504:	8f 90       	pop	r8
    1506:	08 95       	ret

00001508 <GLCD_Circle>:

	// draw a circle
	// 원을 그립니다.
	void GLCD_Circle(unsigned char x1,unsigned char y1,unsigned char r)
	{
    1508:	2f 92       	push	r2
    150a:	3f 92       	push	r3
    150c:	4f 92       	push	r4
    150e:	5f 92       	push	r5
    1510:	6f 92       	push	r6
    1512:	7f 92       	push	r7
    1514:	8f 92       	push	r8
    1516:	9f 92       	push	r9
    1518:	af 92       	push	r10
    151a:	bf 92       	push	r11
    151c:	cf 92       	push	r12
    151e:	df 92       	push	r13
    1520:	ef 92       	push	r14
    1522:	ff 92       	push	r15
    1524:	0f 93       	push	r16
    1526:	1f 93       	push	r17
    1528:	cf 93       	push	r28
    152a:	df 93       	push	r29
    152c:	cd b7       	in	r28, 0x3d	; 61
    152e:	de b7       	in	r29, 0x3e	; 62
    1530:	27 97       	sbiw	r28, 0x07	; 7
    1532:	0f b6       	in	r0, 0x3f	; 63
    1534:	f8 94       	cli
    1536:	de bf       	out	0x3e, r29	; 62
    1538:	0f be       	out	0x3f, r0	; 63
    153a:	cd bf       	out	0x3d, r28	; 61
    153c:	8d 83       	std	Y+5, r24	; 0x05
		int x, y;
		float s;
		for(y = y1 - r*3/4; y <= y1 + r*3/4; y++) // draw with y variable
    153e:	e6 2e       	mov	r14, r22
    1540:	f1 2c       	mov	r15, r1
    1542:	24 2f       	mov	r18, r20
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	3c 83       	std	Y+4, r19	; 0x04
    1548:	2b 83       	std	Y+3, r18	; 0x03
    154a:	89 01       	movw	r16, r18
    154c:	00 0f       	add	r16, r16
    154e:	11 1f       	adc	r17, r17
    1550:	02 0f       	add	r16, r18
    1552:	13 1f       	adc	r17, r19
    1554:	c8 01       	movw	r24, r16
    1556:	95 95       	asr	r25
    1558:	87 95       	ror	r24
    155a:	95 95       	asr	r25
    155c:	87 95       	ror	r24
    155e:	9a 83       	std	Y+2, r25	; 0x02
    1560:	89 83       	std	Y+1, r24	; 0x01
    1562:	f7 01       	movw	r30, r14
    1564:	e8 1b       	sub	r30, r24
    1566:	f9 0b       	sbc	r31, r25
    1568:	ff 83       	std	Y+7, r31	; 0x07
    156a:	ee 83       	std	Y+6, r30	; 0x06
    156c:	6c 01       	movw	r12, r24
    156e:	ce 0c       	add	r12, r14
    1570:	df 1c       	adc	r13, r15
    1572:	ce 16       	cp	r12, r30
    1574:	df 06       	cpc	r13, r31
    1576:	0c f4       	brge	.+2      	; 0x157a <GLCD_Circle+0x72>
    1578:	39 c0       	rjmp	.+114    	; 0x15ec <GLCD_Circle+0xe4>
		{
			s = sqrt(r*r - (y-y1)*(y-y1)) + 0.5;
    157a:	22 9f       	mul	r18, r18
    157c:	30 01       	movw	r6, r0
    157e:	23 9f       	mul	r18, r19
    1580:	70 0c       	add	r7, r0
    1582:	70 0c       	add	r7, r0
    1584:	11 24       	eor	r1, r1
    1586:	8c 01       	movw	r16, r24
    1588:	27 01       	movw	r4, r14
			x = x1 + (unsigned char)s;
    158a:	fd 81       	ldd	r31, Y+5	; 0x05
    158c:	2f 2e       	mov	r2, r31
    158e:	8e 81       	ldd	r24, Y+6	; 0x06
    1590:	9f 81       	ldd	r25, Y+7	; 0x07
    1592:	84 19       	sub	r24, r4
    1594:	95 09       	sbc	r25, r5
	{
		int x, y;
		float s;
		for(y = y1 - r*3/4; y <= y1 + r*3/4; y++) // draw with y variable
		{
			s = sqrt(r*r - (y-y1)*(y-y1)) + 0.5;
    1596:	08 9f       	mul	r16, r24
    1598:	40 01       	movw	r8, r0
    159a:	09 9f       	mul	r16, r25
    159c:	90 0c       	add	r9, r0
    159e:	18 9f       	mul	r17, r24
    15a0:	90 0c       	add	r9, r0
    15a2:	11 24       	eor	r1, r1
    15a4:	86 0c       	add	r8, r6
    15a6:	97 1c       	adc	r9, r7
    15a8:	09 2c       	mov	r0, r9
    15aa:	00 0c       	add	r0, r0
    15ac:	aa 08       	sbc	r10, r10
    15ae:	bb 08       	sbc	r11, r11
    15b0:	c5 01       	movw	r24, r10
    15b2:	b4 01       	movw	r22, r8
    15b4:	0e d1       	rcall	.+540    	; 0x17d2 <__floatsisf>
    15b6:	9d d1       	rcall	.+826    	; 0x18f2 <sqrt>
    15b8:	20 e0       	ldi	r18, 0x00	; 0
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	40 e0       	ldi	r20, 0x00	; 0
    15be:	5f e3       	ldi	r21, 0x3F	; 63
    15c0:	76 d0       	rcall	.+236    	; 0x16ae <__addsf3>
			x = x1 + (unsigned char)s;
    15c2:	d9 d0       	rcall	.+434    	; 0x1776 <__fixunssfsi>
    15c4:	a6 2e       	mov	r10, r22
			GLCD_Dot(x,y);
    15c6:	6e 81       	ldd	r22, Y+6	; 0x06
    15c8:	82 2d       	mov	r24, r2
    15ca:	8a 0d       	add	r24, r10
    15cc:	55 de       	rcall	.-854    	; 0x1278 <GLCD_Dot>
			x = x1 - (unsigned char)s;
			GLCD_Dot(x,y);
    15ce:	6e 81       	ldd	r22, Y+6	; 0x06
    15d0:	82 2d       	mov	r24, r2
    15d2:	8a 19       	sub	r24, r10
    15d4:	51 de       	rcall	.-862    	; 0x1278 <GLCD_Dot>
	// 원을 그립니다.
	void GLCD_Circle(unsigned char x1,unsigned char y1,unsigned char r)
	{
		int x, y;
		float s;
		for(y = y1 - r*3/4; y <= y1 + r*3/4; y++) // draw with y variable
    15d6:	2e 81       	ldd	r18, Y+6	; 0x06
    15d8:	3f 81       	ldd	r19, Y+7	; 0x07
    15da:	2f 5f       	subi	r18, 0xFF	; 255
    15dc:	3f 4f       	sbci	r19, 0xFF	; 255
    15de:	3f 83       	std	Y+7, r19	; 0x07
    15e0:	2e 83       	std	Y+6, r18	; 0x06
    15e2:	01 50       	subi	r16, 0x01	; 1
    15e4:	11 09       	sbc	r17, r1
    15e6:	c2 16       	cp	r12, r18
    15e8:	d3 06       	cpc	r13, r19
    15ea:	8c f6       	brge	.-94     	; 0x158e <GLCD_Circle+0x86>
			x = x1 + (unsigned char)s;
			GLCD_Dot(x,y);
			x = x1 - (unsigned char)s;
			GLCD_Dot(x,y);
		}
		for(x = x1 - r*3/4; x <= x1 + r*3/4; x++) // draw with x variable
    15ec:	3d 81       	ldd	r19, Y+5	; 0x05
    15ee:	c3 2e       	mov	r12, r19
    15f0:	d1 2c       	mov	r13, r1
    15f2:	16 01       	movw	r2, r12
    15f4:	89 81       	ldd	r24, Y+1	; 0x01
    15f6:	9a 81       	ldd	r25, Y+2	; 0x02
    15f8:	28 1a       	sub	r2, r24
    15fa:	39 0a       	sbc	r3, r25
    15fc:	c8 0e       	add	r12, r24
    15fe:	d9 1e       	adc	r13, r25
    1600:	c2 14       	cp	r12, r2
    1602:	d3 04       	cpc	r13, r3
    1604:	0c f4       	brge	.+2      	; 0x1608 <GLCD_Circle+0x100>
    1606:	39 c0       	rjmp	.+114    	; 0x167a <GLCD_Circle+0x172>
		{
			s = sqrt(r*r - (x-x1)*(x-x1)) + 0.5;
    1608:	eb 81       	ldd	r30, Y+3	; 0x03
    160a:	fc 81       	ldd	r31, Y+4	; 0x04
    160c:	ee 9f       	mul	r30, r30
    160e:	30 01       	movw	r6, r0
    1610:	ef 9f       	mul	r30, r31
    1612:	70 0c       	add	r7, r0
    1614:	70 0c       	add	r7, r0
    1616:	11 24       	eor	r1, r1
    1618:	8c 01       	movw	r16, r24
    161a:	43 2e       	mov	r4, r19
    161c:	51 2c       	mov	r5, r1
    161e:	c1 01       	movw	r24, r2
    1620:	84 19       	sub	r24, r4
    1622:	95 09       	sbc	r25, r5
    1624:	08 9f       	mul	r16, r24
    1626:	40 01       	movw	r8, r0
    1628:	09 9f       	mul	r16, r25
    162a:	90 0c       	add	r9, r0
    162c:	18 9f       	mul	r17, r24
    162e:	90 0c       	add	r9, r0
    1630:	11 24       	eor	r1, r1
    1632:	86 0c       	add	r8, r6
    1634:	97 1c       	adc	r9, r7
    1636:	09 2c       	mov	r0, r9
    1638:	00 0c       	add	r0, r0
    163a:	aa 08       	sbc	r10, r10
    163c:	bb 08       	sbc	r11, r11
    163e:	c5 01       	movw	r24, r10
    1640:	b4 01       	movw	r22, r8
    1642:	c7 d0       	rcall	.+398    	; 0x17d2 <__floatsisf>
    1644:	56 d1       	rcall	.+684    	; 0x18f2 <sqrt>
    1646:	20 e0       	ldi	r18, 0x00	; 0
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	40 e0       	ldi	r20, 0x00	; 0
    164c:	5f e3       	ldi	r21, 0x3F	; 63
    164e:	2f d0       	rcall	.+94     	; 0x16ae <__addsf3>
			y = y1 + (unsigned char)s;
    1650:	92 d0       	rcall	.+292    	; 0x1776 <__fixunssfsi>
    1652:	a6 2e       	mov	r10, r22
    1654:	b1 2c       	mov	r11, r1
    1656:	b7 01       	movw	r22, r14
    1658:	6a 0d       	add	r22, r10
    165a:	7b 1d       	adc	r23, r11
			GLCD_Dot(x,y);
    165c:	82 2d       	mov	r24, r2
    165e:	0c de       	rcall	.-1000   	; 0x1278 <GLCD_Dot>
			y = y1 - (unsigned char)s;
    1660:	b7 01       	movw	r22, r14
    1662:	6a 19       	sub	r22, r10
    1664:	7b 09       	sbc	r23, r11
			GLCD_Dot(x,y);
    1666:	82 2d       	mov	r24, r2
    1668:	07 de       	rcall	.-1010   	; 0x1278 <GLCD_Dot>
			x = x1 + (unsigned char)s;
			GLCD_Dot(x,y);
			x = x1 - (unsigned char)s;
			GLCD_Dot(x,y);
		}
		for(x = x1 - r*3/4; x <= x1 + r*3/4; x++) // draw with x variable
    166a:	ff ef       	ldi	r31, 0xFF	; 255
    166c:	2f 1a       	sub	r2, r31
    166e:	3f 0a       	sbc	r3, r31
    1670:	01 50       	subi	r16, 0x01	; 1
    1672:	11 09       	sbc	r17, r1
    1674:	c2 14       	cp	r12, r2
    1676:	d3 04       	cpc	r13, r3
    1678:	94 f6       	brge	.-92     	; 0x161e <GLCD_Circle+0x116>
			y = y1 + (unsigned char)s;
			GLCD_Dot(x,y);
			y = y1 - (unsigned char)s;
			GLCD_Dot(x,y);
		}
	}
    167a:	27 96       	adiw	r28, 0x07	; 7
    167c:	0f b6       	in	r0, 0x3f	; 63
    167e:	f8 94       	cli
    1680:	de bf       	out	0x3e, r29	; 62
    1682:	0f be       	out	0x3f, r0	; 63
    1684:	cd bf       	out	0x3d, r28	; 61
    1686:	df 91       	pop	r29
    1688:	cf 91       	pop	r28
    168a:	1f 91       	pop	r17
    168c:	0f 91       	pop	r16
    168e:	ff 90       	pop	r15
    1690:	ef 90       	pop	r14
    1692:	df 90       	pop	r13
    1694:	cf 90       	pop	r12
    1696:	bf 90       	pop	r11
    1698:	af 90       	pop	r10
    169a:	9f 90       	pop	r9
    169c:	8f 90       	pop	r8
    169e:	7f 90       	pop	r7
    16a0:	6f 90       	pop	r6
    16a2:	5f 90       	pop	r5
    16a4:	4f 90       	pop	r4
    16a6:	3f 90       	pop	r3
    16a8:	2f 90       	pop	r2
    16aa:	08 95       	ret

000016ac <__subsf3>:
    16ac:	50 58       	subi	r21, 0x80	; 128

000016ae <__addsf3>:
    16ae:	bb 27       	eor	r27, r27
    16b0:	aa 27       	eor	r26, r26
    16b2:	0e d0       	rcall	.+28     	; 0x16d0 <__addsf3x>
    16b4:	e0 c0       	rjmp	.+448    	; 0x1876 <__fp_round>
    16b6:	d1 d0       	rcall	.+418    	; 0x185a <__fp_pscA>
    16b8:	30 f0       	brcs	.+12     	; 0x16c6 <__addsf3+0x18>
    16ba:	d6 d0       	rcall	.+428    	; 0x1868 <__fp_pscB>
    16bc:	20 f0       	brcs	.+8      	; 0x16c6 <__addsf3+0x18>
    16be:	31 f4       	brne	.+12     	; 0x16cc <__addsf3+0x1e>
    16c0:	9f 3f       	cpi	r25, 0xFF	; 255
    16c2:	11 f4       	brne	.+4      	; 0x16c8 <__addsf3+0x1a>
    16c4:	1e f4       	brtc	.+6      	; 0x16cc <__addsf3+0x1e>
    16c6:	c6 c0       	rjmp	.+396    	; 0x1854 <__fp_nan>
    16c8:	0e f4       	brtc	.+2      	; 0x16cc <__addsf3+0x1e>
    16ca:	e0 95       	com	r30
    16cc:	e7 fb       	bst	r30, 7
    16ce:	bc c0       	rjmp	.+376    	; 0x1848 <__fp_inf>

000016d0 <__addsf3x>:
    16d0:	e9 2f       	mov	r30, r25
    16d2:	e2 d0       	rcall	.+452    	; 0x1898 <__fp_split3>
    16d4:	80 f3       	brcs	.-32     	; 0x16b6 <__addsf3+0x8>
    16d6:	ba 17       	cp	r27, r26
    16d8:	62 07       	cpc	r22, r18
    16da:	73 07       	cpc	r23, r19
    16dc:	84 07       	cpc	r24, r20
    16de:	95 07       	cpc	r25, r21
    16e0:	18 f0       	brcs	.+6      	; 0x16e8 <__addsf3x+0x18>
    16e2:	71 f4       	brne	.+28     	; 0x1700 <__addsf3x+0x30>
    16e4:	9e f5       	brtc	.+102    	; 0x174c <__addsf3x+0x7c>
    16e6:	fa c0       	rjmp	.+500    	; 0x18dc <__fp_zero>
    16e8:	0e f4       	brtc	.+2      	; 0x16ec <__addsf3x+0x1c>
    16ea:	e0 95       	com	r30
    16ec:	0b 2e       	mov	r0, r27
    16ee:	ba 2f       	mov	r27, r26
    16f0:	a0 2d       	mov	r26, r0
    16f2:	0b 01       	movw	r0, r22
    16f4:	b9 01       	movw	r22, r18
    16f6:	90 01       	movw	r18, r0
    16f8:	0c 01       	movw	r0, r24
    16fa:	ca 01       	movw	r24, r20
    16fc:	a0 01       	movw	r20, r0
    16fe:	11 24       	eor	r1, r1
    1700:	ff 27       	eor	r31, r31
    1702:	59 1b       	sub	r21, r25
    1704:	99 f0       	breq	.+38     	; 0x172c <__addsf3x+0x5c>
    1706:	59 3f       	cpi	r21, 0xF9	; 249
    1708:	50 f4       	brcc	.+20     	; 0x171e <__addsf3x+0x4e>
    170a:	50 3e       	cpi	r21, 0xE0	; 224
    170c:	68 f1       	brcs	.+90     	; 0x1768 <__addsf3x+0x98>
    170e:	1a 16       	cp	r1, r26
    1710:	f0 40       	sbci	r31, 0x00	; 0
    1712:	a2 2f       	mov	r26, r18
    1714:	23 2f       	mov	r18, r19
    1716:	34 2f       	mov	r19, r20
    1718:	44 27       	eor	r20, r20
    171a:	58 5f       	subi	r21, 0xF8	; 248
    171c:	f3 cf       	rjmp	.-26     	; 0x1704 <__addsf3x+0x34>
    171e:	46 95       	lsr	r20
    1720:	37 95       	ror	r19
    1722:	27 95       	ror	r18
    1724:	a7 95       	ror	r26
    1726:	f0 40       	sbci	r31, 0x00	; 0
    1728:	53 95       	inc	r21
    172a:	c9 f7       	brne	.-14     	; 0x171e <__addsf3x+0x4e>
    172c:	7e f4       	brtc	.+30     	; 0x174c <__addsf3x+0x7c>
    172e:	1f 16       	cp	r1, r31
    1730:	ba 0b       	sbc	r27, r26
    1732:	62 0b       	sbc	r22, r18
    1734:	73 0b       	sbc	r23, r19
    1736:	84 0b       	sbc	r24, r20
    1738:	ba f0       	brmi	.+46     	; 0x1768 <__addsf3x+0x98>
    173a:	91 50       	subi	r25, 0x01	; 1
    173c:	a1 f0       	breq	.+40     	; 0x1766 <__addsf3x+0x96>
    173e:	ff 0f       	add	r31, r31
    1740:	bb 1f       	adc	r27, r27
    1742:	66 1f       	adc	r22, r22
    1744:	77 1f       	adc	r23, r23
    1746:	88 1f       	adc	r24, r24
    1748:	c2 f7       	brpl	.-16     	; 0x173a <__addsf3x+0x6a>
    174a:	0e c0       	rjmp	.+28     	; 0x1768 <__addsf3x+0x98>
    174c:	ba 0f       	add	r27, r26
    174e:	62 1f       	adc	r22, r18
    1750:	73 1f       	adc	r23, r19
    1752:	84 1f       	adc	r24, r20
    1754:	48 f4       	brcc	.+18     	; 0x1768 <__addsf3x+0x98>
    1756:	87 95       	ror	r24
    1758:	77 95       	ror	r23
    175a:	67 95       	ror	r22
    175c:	b7 95       	ror	r27
    175e:	f7 95       	ror	r31
    1760:	9e 3f       	cpi	r25, 0xFE	; 254
    1762:	08 f0       	brcs	.+2      	; 0x1766 <__addsf3x+0x96>
    1764:	b3 cf       	rjmp	.-154    	; 0x16cc <__addsf3+0x1e>
    1766:	93 95       	inc	r25
    1768:	88 0f       	add	r24, r24
    176a:	08 f0       	brcs	.+2      	; 0x176e <__addsf3x+0x9e>
    176c:	99 27       	eor	r25, r25
    176e:	ee 0f       	add	r30, r30
    1770:	97 95       	ror	r25
    1772:	87 95       	ror	r24
    1774:	08 95       	ret

00001776 <__fixunssfsi>:
    1776:	98 d0       	rcall	.+304    	; 0x18a8 <__fp_splitA>
    1778:	88 f0       	brcs	.+34     	; 0x179c <__fixunssfsi+0x26>
    177a:	9f 57       	subi	r25, 0x7F	; 127
    177c:	90 f0       	brcs	.+36     	; 0x17a2 <__fixunssfsi+0x2c>
    177e:	b9 2f       	mov	r27, r25
    1780:	99 27       	eor	r25, r25
    1782:	b7 51       	subi	r27, 0x17	; 23
    1784:	a0 f0       	brcs	.+40     	; 0x17ae <__fixunssfsi+0x38>
    1786:	d1 f0       	breq	.+52     	; 0x17bc <__fixunssfsi+0x46>
    1788:	66 0f       	add	r22, r22
    178a:	77 1f       	adc	r23, r23
    178c:	88 1f       	adc	r24, r24
    178e:	99 1f       	adc	r25, r25
    1790:	1a f0       	brmi	.+6      	; 0x1798 <__fixunssfsi+0x22>
    1792:	ba 95       	dec	r27
    1794:	c9 f7       	brne	.-14     	; 0x1788 <__fixunssfsi+0x12>
    1796:	12 c0       	rjmp	.+36     	; 0x17bc <__fixunssfsi+0x46>
    1798:	b1 30       	cpi	r27, 0x01	; 1
    179a:	81 f0       	breq	.+32     	; 0x17bc <__fixunssfsi+0x46>
    179c:	9f d0       	rcall	.+318    	; 0x18dc <__fp_zero>
    179e:	b1 e0       	ldi	r27, 0x01	; 1
    17a0:	08 95       	ret
    17a2:	9c c0       	rjmp	.+312    	; 0x18dc <__fp_zero>
    17a4:	67 2f       	mov	r22, r23
    17a6:	78 2f       	mov	r23, r24
    17a8:	88 27       	eor	r24, r24
    17aa:	b8 5f       	subi	r27, 0xF8	; 248
    17ac:	39 f0       	breq	.+14     	; 0x17bc <__fixunssfsi+0x46>
    17ae:	b9 3f       	cpi	r27, 0xF9	; 249
    17b0:	cc f3       	brlt	.-14     	; 0x17a4 <__fixunssfsi+0x2e>
    17b2:	86 95       	lsr	r24
    17b4:	77 95       	ror	r23
    17b6:	67 95       	ror	r22
    17b8:	b3 95       	inc	r27
    17ba:	d9 f7       	brne	.-10     	; 0x17b2 <__fixunssfsi+0x3c>
    17bc:	3e f4       	brtc	.+14     	; 0x17cc <__fixunssfsi+0x56>
    17be:	90 95       	com	r25
    17c0:	80 95       	com	r24
    17c2:	70 95       	com	r23
    17c4:	61 95       	neg	r22
    17c6:	7f 4f       	sbci	r23, 0xFF	; 255
    17c8:	8f 4f       	sbci	r24, 0xFF	; 255
    17ca:	9f 4f       	sbci	r25, 0xFF	; 255
    17cc:	08 95       	ret

000017ce <__floatunsisf>:
    17ce:	e8 94       	clt
    17d0:	09 c0       	rjmp	.+18     	; 0x17e4 <__floatsisf+0x12>

000017d2 <__floatsisf>:
    17d2:	97 fb       	bst	r25, 7
    17d4:	3e f4       	brtc	.+14     	; 0x17e4 <__floatsisf+0x12>
    17d6:	90 95       	com	r25
    17d8:	80 95       	com	r24
    17da:	70 95       	com	r23
    17dc:	61 95       	neg	r22
    17de:	7f 4f       	sbci	r23, 0xFF	; 255
    17e0:	8f 4f       	sbci	r24, 0xFF	; 255
    17e2:	9f 4f       	sbci	r25, 0xFF	; 255
    17e4:	99 23       	and	r25, r25
    17e6:	a9 f0       	breq	.+42     	; 0x1812 <__floatsisf+0x40>
    17e8:	f9 2f       	mov	r31, r25
    17ea:	96 e9       	ldi	r25, 0x96	; 150
    17ec:	bb 27       	eor	r27, r27
    17ee:	93 95       	inc	r25
    17f0:	f6 95       	lsr	r31
    17f2:	87 95       	ror	r24
    17f4:	77 95       	ror	r23
    17f6:	67 95       	ror	r22
    17f8:	b7 95       	ror	r27
    17fa:	f1 11       	cpse	r31, r1
    17fc:	f8 cf       	rjmp	.-16     	; 0x17ee <__floatsisf+0x1c>
    17fe:	fa f4       	brpl	.+62     	; 0x183e <__floatsisf+0x6c>
    1800:	bb 0f       	add	r27, r27
    1802:	11 f4       	brne	.+4      	; 0x1808 <__floatsisf+0x36>
    1804:	60 ff       	sbrs	r22, 0
    1806:	1b c0       	rjmp	.+54     	; 0x183e <__floatsisf+0x6c>
    1808:	6f 5f       	subi	r22, 0xFF	; 255
    180a:	7f 4f       	sbci	r23, 0xFF	; 255
    180c:	8f 4f       	sbci	r24, 0xFF	; 255
    180e:	9f 4f       	sbci	r25, 0xFF	; 255
    1810:	16 c0       	rjmp	.+44     	; 0x183e <__floatsisf+0x6c>
    1812:	88 23       	and	r24, r24
    1814:	11 f0       	breq	.+4      	; 0x181a <__floatsisf+0x48>
    1816:	96 e9       	ldi	r25, 0x96	; 150
    1818:	11 c0       	rjmp	.+34     	; 0x183c <__floatsisf+0x6a>
    181a:	77 23       	and	r23, r23
    181c:	21 f0       	breq	.+8      	; 0x1826 <__floatsisf+0x54>
    181e:	9e e8       	ldi	r25, 0x8E	; 142
    1820:	87 2f       	mov	r24, r23
    1822:	76 2f       	mov	r23, r22
    1824:	05 c0       	rjmp	.+10     	; 0x1830 <__floatsisf+0x5e>
    1826:	66 23       	and	r22, r22
    1828:	71 f0       	breq	.+28     	; 0x1846 <__floatsisf+0x74>
    182a:	96 e8       	ldi	r25, 0x86	; 134
    182c:	86 2f       	mov	r24, r22
    182e:	70 e0       	ldi	r23, 0x00	; 0
    1830:	60 e0       	ldi	r22, 0x00	; 0
    1832:	2a f0       	brmi	.+10     	; 0x183e <__floatsisf+0x6c>
    1834:	9a 95       	dec	r25
    1836:	66 0f       	add	r22, r22
    1838:	77 1f       	adc	r23, r23
    183a:	88 1f       	adc	r24, r24
    183c:	da f7       	brpl	.-10     	; 0x1834 <__floatsisf+0x62>
    183e:	88 0f       	add	r24, r24
    1840:	96 95       	lsr	r25
    1842:	87 95       	ror	r24
    1844:	97 f9       	bld	r25, 7
    1846:	08 95       	ret

00001848 <__fp_inf>:
    1848:	97 f9       	bld	r25, 7
    184a:	9f 67       	ori	r25, 0x7F	; 127
    184c:	80 e8       	ldi	r24, 0x80	; 128
    184e:	70 e0       	ldi	r23, 0x00	; 0
    1850:	60 e0       	ldi	r22, 0x00	; 0
    1852:	08 95       	ret

00001854 <__fp_nan>:
    1854:	9f ef       	ldi	r25, 0xFF	; 255
    1856:	80 ec       	ldi	r24, 0xC0	; 192
    1858:	08 95       	ret

0000185a <__fp_pscA>:
    185a:	00 24       	eor	r0, r0
    185c:	0a 94       	dec	r0
    185e:	16 16       	cp	r1, r22
    1860:	17 06       	cpc	r1, r23
    1862:	18 06       	cpc	r1, r24
    1864:	09 06       	cpc	r0, r25
    1866:	08 95       	ret

00001868 <__fp_pscB>:
    1868:	00 24       	eor	r0, r0
    186a:	0a 94       	dec	r0
    186c:	12 16       	cp	r1, r18
    186e:	13 06       	cpc	r1, r19
    1870:	14 06       	cpc	r1, r20
    1872:	05 06       	cpc	r0, r21
    1874:	08 95       	ret

00001876 <__fp_round>:
    1876:	09 2e       	mov	r0, r25
    1878:	03 94       	inc	r0
    187a:	00 0c       	add	r0, r0
    187c:	11 f4       	brne	.+4      	; 0x1882 <__fp_round+0xc>
    187e:	88 23       	and	r24, r24
    1880:	52 f0       	brmi	.+20     	; 0x1896 <__fp_round+0x20>
    1882:	bb 0f       	add	r27, r27
    1884:	40 f4       	brcc	.+16     	; 0x1896 <__fp_round+0x20>
    1886:	bf 2b       	or	r27, r31
    1888:	11 f4       	brne	.+4      	; 0x188e <__fp_round+0x18>
    188a:	60 ff       	sbrs	r22, 0
    188c:	04 c0       	rjmp	.+8      	; 0x1896 <__fp_round+0x20>
    188e:	6f 5f       	subi	r22, 0xFF	; 255
    1890:	7f 4f       	sbci	r23, 0xFF	; 255
    1892:	8f 4f       	sbci	r24, 0xFF	; 255
    1894:	9f 4f       	sbci	r25, 0xFF	; 255
    1896:	08 95       	ret

00001898 <__fp_split3>:
    1898:	57 fd       	sbrc	r21, 7
    189a:	90 58       	subi	r25, 0x80	; 128
    189c:	44 0f       	add	r20, r20
    189e:	55 1f       	adc	r21, r21
    18a0:	59 f0       	breq	.+22     	; 0x18b8 <__fp_splitA+0x10>
    18a2:	5f 3f       	cpi	r21, 0xFF	; 255
    18a4:	71 f0       	breq	.+28     	; 0x18c2 <__fp_splitA+0x1a>
    18a6:	47 95       	ror	r20

000018a8 <__fp_splitA>:
    18a8:	88 0f       	add	r24, r24
    18aa:	97 fb       	bst	r25, 7
    18ac:	99 1f       	adc	r25, r25
    18ae:	61 f0       	breq	.+24     	; 0x18c8 <__fp_splitA+0x20>
    18b0:	9f 3f       	cpi	r25, 0xFF	; 255
    18b2:	79 f0       	breq	.+30     	; 0x18d2 <__fp_splitA+0x2a>
    18b4:	87 95       	ror	r24
    18b6:	08 95       	ret
    18b8:	12 16       	cp	r1, r18
    18ba:	13 06       	cpc	r1, r19
    18bc:	14 06       	cpc	r1, r20
    18be:	55 1f       	adc	r21, r21
    18c0:	f2 cf       	rjmp	.-28     	; 0x18a6 <__fp_split3+0xe>
    18c2:	46 95       	lsr	r20
    18c4:	f1 df       	rcall	.-30     	; 0x18a8 <__fp_splitA>
    18c6:	08 c0       	rjmp	.+16     	; 0x18d8 <__fp_splitA+0x30>
    18c8:	16 16       	cp	r1, r22
    18ca:	17 06       	cpc	r1, r23
    18cc:	18 06       	cpc	r1, r24
    18ce:	99 1f       	adc	r25, r25
    18d0:	f1 cf       	rjmp	.-30     	; 0x18b4 <__fp_splitA+0xc>
    18d2:	86 95       	lsr	r24
    18d4:	71 05       	cpc	r23, r1
    18d6:	61 05       	cpc	r22, r1
    18d8:	08 94       	sec
    18da:	08 95       	ret

000018dc <__fp_zero>:
    18dc:	e8 94       	clt

000018de <__fp_szero>:
    18de:	bb 27       	eor	r27, r27
    18e0:	66 27       	eor	r22, r22
    18e2:	77 27       	eor	r23, r23
    18e4:	cb 01       	movw	r24, r22
    18e6:	97 f9       	bld	r25, 7
    18e8:	08 95       	ret
    18ea:	11 f4       	brne	.+4      	; 0x18f0 <__fp_szero+0x12>
    18ec:	0e f4       	brtc	.+2      	; 0x18f0 <__fp_szero+0x12>
    18ee:	b2 cf       	rjmp	.-156    	; 0x1854 <__fp_nan>
    18f0:	3e c0       	rjmp	.+124    	; 0x196e <__fp_mpack>

000018f2 <sqrt>:
    18f2:	da df       	rcall	.-76     	; 0x18a8 <__fp_splitA>
    18f4:	d0 f3       	brcs	.-12     	; 0x18ea <__fp_szero+0xc>
    18f6:	99 23       	and	r25, r25
    18f8:	d9 f3       	breq	.-10     	; 0x18f0 <__fp_szero+0x12>
    18fa:	ce f3       	brts	.-14     	; 0x18ee <__fp_szero+0x10>
    18fc:	9f 57       	subi	r25, 0x7F	; 127
    18fe:	55 0b       	sbc	r21, r21
    1900:	87 ff       	sbrs	r24, 7
    1902:	43 d0       	rcall	.+134    	; 0x198a <__fp_norm2>
    1904:	00 24       	eor	r0, r0
    1906:	a0 e6       	ldi	r26, 0x60	; 96
    1908:	40 ea       	ldi	r20, 0xA0	; 160
    190a:	90 01       	movw	r18, r0
    190c:	80 58       	subi	r24, 0x80	; 128
    190e:	56 95       	lsr	r21
    1910:	97 95       	ror	r25
    1912:	28 f4       	brcc	.+10     	; 0x191e <sqrt+0x2c>
    1914:	80 5c       	subi	r24, 0xC0	; 192
    1916:	66 0f       	add	r22, r22
    1918:	77 1f       	adc	r23, r23
    191a:	88 1f       	adc	r24, r24
    191c:	20 f0       	brcs	.+8      	; 0x1926 <sqrt+0x34>
    191e:	26 17       	cp	r18, r22
    1920:	37 07       	cpc	r19, r23
    1922:	48 07       	cpc	r20, r24
    1924:	30 f4       	brcc	.+12     	; 0x1932 <sqrt+0x40>
    1926:	62 1b       	sub	r22, r18
    1928:	73 0b       	sbc	r23, r19
    192a:	84 0b       	sbc	r24, r20
    192c:	20 29       	or	r18, r0
    192e:	31 29       	or	r19, r1
    1930:	4a 2b       	or	r20, r26
    1932:	a6 95       	lsr	r26
    1934:	17 94       	ror	r1
    1936:	07 94       	ror	r0
    1938:	20 25       	eor	r18, r0
    193a:	31 25       	eor	r19, r1
    193c:	4a 27       	eor	r20, r26
    193e:	58 f7       	brcc	.-42     	; 0x1916 <sqrt+0x24>
    1940:	66 0f       	add	r22, r22
    1942:	77 1f       	adc	r23, r23
    1944:	88 1f       	adc	r24, r24
    1946:	20 f0       	brcs	.+8      	; 0x1950 <sqrt+0x5e>
    1948:	26 17       	cp	r18, r22
    194a:	37 07       	cpc	r19, r23
    194c:	48 07       	cpc	r20, r24
    194e:	30 f4       	brcc	.+12     	; 0x195c <sqrt+0x6a>
    1950:	62 0b       	sbc	r22, r18
    1952:	73 0b       	sbc	r23, r19
    1954:	84 0b       	sbc	r24, r20
    1956:	20 0d       	add	r18, r0
    1958:	31 1d       	adc	r19, r1
    195a:	41 1d       	adc	r20, r1
    195c:	a0 95       	com	r26
    195e:	81 f7       	brne	.-32     	; 0x1940 <sqrt+0x4e>
    1960:	b9 01       	movw	r22, r18
    1962:	84 2f       	mov	r24, r20
    1964:	91 58       	subi	r25, 0x81	; 129
    1966:	88 0f       	add	r24, r24
    1968:	96 95       	lsr	r25
    196a:	87 95       	ror	r24
    196c:	08 95       	ret

0000196e <__fp_mpack>:
    196e:	9f 3f       	cpi	r25, 0xFF	; 255
    1970:	31 f0       	breq	.+12     	; 0x197e <__fp_mpack_finite+0xc>

00001972 <__fp_mpack_finite>:
    1972:	91 50       	subi	r25, 0x01	; 1
    1974:	20 f4       	brcc	.+8      	; 0x197e <__fp_mpack_finite+0xc>
    1976:	87 95       	ror	r24
    1978:	77 95       	ror	r23
    197a:	67 95       	ror	r22
    197c:	b7 95       	ror	r27
    197e:	88 0f       	add	r24, r24
    1980:	91 1d       	adc	r25, r1
    1982:	96 95       	lsr	r25
    1984:	87 95       	ror	r24
    1986:	97 f9       	bld	r25, 7
    1988:	08 95       	ret

0000198a <__fp_norm2>:
    198a:	91 50       	subi	r25, 0x01	; 1
    198c:	50 40       	sbci	r21, 0x00	; 0
    198e:	66 0f       	add	r22, r22
    1990:	77 1f       	adc	r23, r23
    1992:	88 1f       	adc	r24, r24
    1994:	d2 f7       	brpl	.-12     	; 0x198a <__fp_norm2>
    1996:	08 95       	ret

00001998 <__divmodhi4>:
    1998:	97 fb       	bst	r25, 7
    199a:	07 2e       	mov	r0, r23
    199c:	16 f4       	brtc	.+4      	; 0x19a2 <__divmodhi4+0xa>
    199e:	00 94       	com	r0
    19a0:	06 d0       	rcall	.+12     	; 0x19ae <__divmodhi4_neg1>
    19a2:	77 fd       	sbrc	r23, 7
    19a4:	08 d0       	rcall	.+16     	; 0x19b6 <__divmodhi4_neg2>
    19a6:	0b d0       	rcall	.+22     	; 0x19be <__udivmodhi4>
    19a8:	07 fc       	sbrc	r0, 7
    19aa:	05 d0       	rcall	.+10     	; 0x19b6 <__divmodhi4_neg2>
    19ac:	3e f4       	brtc	.+14     	; 0x19bc <__divmodhi4_exit>

000019ae <__divmodhi4_neg1>:
    19ae:	90 95       	com	r25
    19b0:	81 95       	neg	r24
    19b2:	9f 4f       	sbci	r25, 0xFF	; 255
    19b4:	08 95       	ret

000019b6 <__divmodhi4_neg2>:
    19b6:	70 95       	com	r23
    19b8:	61 95       	neg	r22
    19ba:	7f 4f       	sbci	r23, 0xFF	; 255

000019bc <__divmodhi4_exit>:
    19bc:	08 95       	ret

000019be <__udivmodhi4>:
    19be:	aa 1b       	sub	r26, r26
    19c0:	bb 1b       	sub	r27, r27
    19c2:	51 e1       	ldi	r21, 0x11	; 17
    19c4:	07 c0       	rjmp	.+14     	; 0x19d4 <__udivmodhi4_ep>

000019c6 <__udivmodhi4_loop>:
    19c6:	aa 1f       	adc	r26, r26
    19c8:	bb 1f       	adc	r27, r27
    19ca:	a6 17       	cp	r26, r22
    19cc:	b7 07       	cpc	r27, r23
    19ce:	10 f0       	brcs	.+4      	; 0x19d4 <__udivmodhi4_ep>
    19d0:	a6 1b       	sub	r26, r22
    19d2:	b7 0b       	sbc	r27, r23

000019d4 <__udivmodhi4_ep>:
    19d4:	88 1f       	adc	r24, r24
    19d6:	99 1f       	adc	r25, r25
    19d8:	5a 95       	dec	r21
    19da:	a9 f7       	brne	.-22     	; 0x19c6 <__udivmodhi4_loop>
    19dc:	80 95       	com	r24
    19de:	90 95       	com	r25
    19e0:	bc 01       	movw	r22, r24
    19e2:	cd 01       	movw	r24, r26
    19e4:	08 95       	ret

000019e6 <__itoa_ncheck>:
    19e6:	bb 27       	eor	r27, r27
    19e8:	4a 30       	cpi	r20, 0x0A	; 10
    19ea:	31 f4       	brne	.+12     	; 0x19f8 <__itoa_ncheck+0x12>
    19ec:	99 23       	and	r25, r25
    19ee:	22 f4       	brpl	.+8      	; 0x19f8 <__itoa_ncheck+0x12>
    19f0:	bd e2       	ldi	r27, 0x2D	; 45
    19f2:	90 95       	com	r25
    19f4:	81 95       	neg	r24
    19f6:	9f 4f       	sbci	r25, 0xFF	; 255
    19f8:	01 c0       	rjmp	.+2      	; 0x19fc <__utoa_common>

000019fa <__utoa_ncheck>:
    19fa:	bb 27       	eor	r27, r27

000019fc <__utoa_common>:
    19fc:	fb 01       	movw	r30, r22
    19fe:	55 27       	eor	r21, r21
    1a00:	aa 27       	eor	r26, r26
    1a02:	88 0f       	add	r24, r24
    1a04:	99 1f       	adc	r25, r25
    1a06:	aa 1f       	adc	r26, r26
    1a08:	a4 17       	cp	r26, r20
    1a0a:	10 f0       	brcs	.+4      	; 0x1a10 <__utoa_common+0x14>
    1a0c:	a4 1b       	sub	r26, r20
    1a0e:	83 95       	inc	r24
    1a10:	50 51       	subi	r21, 0x10	; 16
    1a12:	b9 f7       	brne	.-18     	; 0x1a02 <__utoa_common+0x6>
    1a14:	a0 5d       	subi	r26, 0xD0	; 208
    1a16:	aa 33       	cpi	r26, 0x3A	; 58
    1a18:	08 f0       	brcs	.+2      	; 0x1a1c <__utoa_common+0x20>
    1a1a:	a9 5d       	subi	r26, 0xD9	; 217
    1a1c:	a1 93       	st	Z+, r26
    1a1e:	00 97       	sbiw	r24, 0x00	; 0
    1a20:	79 f7       	brne	.-34     	; 0x1a00 <__utoa_common+0x4>
    1a22:	b1 11       	cpse	r27, r1
    1a24:	b1 93       	st	Z+, r27
    1a26:	11 92       	st	Z+, r1
    1a28:	cb 01       	movw	r24, r22
    1a2a:	00 c0       	rjmp	.+0      	; 0x1a2c <strrev>

00001a2c <strrev>:
    1a2c:	dc 01       	movw	r26, r24
    1a2e:	fc 01       	movw	r30, r24
    1a30:	67 2f       	mov	r22, r23
    1a32:	71 91       	ld	r23, Z+
    1a34:	77 23       	and	r23, r23
    1a36:	e1 f7       	brne	.-8      	; 0x1a30 <strrev+0x4>
    1a38:	32 97       	sbiw	r30, 0x02	; 2
    1a3a:	04 c0       	rjmp	.+8      	; 0x1a44 <strrev+0x18>
    1a3c:	7c 91       	ld	r23, X
    1a3e:	6d 93       	st	X+, r22
    1a40:	70 83       	st	Z, r23
    1a42:	62 91       	ld	r22, -Z
    1a44:	ae 17       	cp	r26, r30
    1a46:	bf 07       	cpc	r27, r31
    1a48:	c8 f3       	brcs	.-14     	; 0x1a3c <strrev+0x10>
    1a4a:	08 95       	ret

00001a4c <_exit>:
    1a4c:	f8 94       	cli

00001a4e <__stop_program>:
    1a4e:	ff cf       	rjmp	.-2      	; 0x1a4e <__stop_program>
